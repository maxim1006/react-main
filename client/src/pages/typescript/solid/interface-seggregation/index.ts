/*
 * I - Interface segregation principle - Принцип разделения интерфейса
 * Программные сущности не должны зависить от методов которые они не используют. Те следует рабивать толстые сущности и интерфейсы на более маленькие и узкоспециализированные, решающие 1 задачу
 *
 * Нельзя заставлять клиента реализовывать интерфейс которым он не пользуется
 *
 * Есть базовый класс с 3мя методами и от него наследуются сперва 1 класс которому нужны 3 метода, потом нужен второй класс но только с 2мя похожими на базовый класс методами, потом 3ий класс но с 2мя другими из базового, и вместо того чтобы кидать ошибки из методов которые не используются лучше разбить базовый интерфейс на 3 маленьких
 *
 * Делать супер общее решение исходя из этого принципа - это антипаттерн
 * */

export default {};
