import './single-responsibility';

// SOLID
/*
 * S - single responsibility principle
 * Говорит о том что для каждого модуля в нашей системе должно быть предопределено одно единственное значение. Все ресурсы которые необходимы для того чтобы этот модуль решал поставленную задачу должны быть инкапсулирвоны в этом модуле
 * O - open/close principle
 * Программные модули должны быть открыты для расширения но закрыты для модификации. Те новый функционал добавляем не изменением/переписыванием старого, а за счет добавления/расширения существующего функционала
 * L - Liskov's substitution principle
 * Объекты в программе должны быть заменяемыми на экземпляры дочерних классов что не должно ломать логику программы
 * I - interface segregation
 * Много интерфейсов предназначенных для клиента лучше чем 1 интерфейс общего назначения, те класс не должен содержать в себе методов которые он не использует
 * D - dependency inversion
 * Зависимость должна строится на абстракциях, а не на чем-то конкретном, те модули высокого уровня не должны зависеть от модулей более низкого уровня, между ними должна быть абстракция
 * */

/*
 * S - single responsibility
 * принцип единой ответсвтенности
 * 1 класс - 1 задача, 1 сущность - 1 задача
 * */

const o = {};
export default o;
