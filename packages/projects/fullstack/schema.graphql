type Query {
  hello: String!
  posts: [Post!]!
  post(id: Float!): Post
  me: User
}

type Post {
  id: Float!
  createdAt: String!
  updatedAt: String!
  title: String!
  description: String!
}

type User {
  id: Float!
  createdAt: String!
  updatedAt: String!
  email: String!
  username: String!
}

type Mutation {
  createPost(title: String!): Post!
  updatePost(id: Float!, description: String, title: String): Post
  deletePost(id: Float!): Boolean
  forgotPassword(email: String!): Boolean!
  changePassword(token: String!, newPassword: String!): UserResponse!
  register(options: UsernamePasswordInput!): UserResponse!
  login(password: String!, usernameOrEmail: String!): UserResponse!
  logout: Boolean!
  updatePassword(newpassword: String!, oldpassword: String!, username: String!): UserResponse!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

type FieldError {
  field: String!
  message: String!
}

input UsernamePasswordInput {
  username: String!
  email: String!
  password: String!
}
