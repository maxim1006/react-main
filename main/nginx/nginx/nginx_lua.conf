worker_processes  1;
error_log logs/error.log;

events {
    worker_connections 1024;
}
http {
    server {
        listen 8080;

        location / {
            default_type text/html;
            access_by_lua_block {
                local function isempty(s)
                    return s == nil or s == ''
                end

                function formatIdpUrl (url, tenantId, defaultTenantId)
                    if tenantId then
                        return url:gsub("{tenantId}", tenantId)
                    end

                    if defaultTenantId then
                        return url:gsub("{tenantId}", defaultTenantId)
                    end

                    return url:gsub("{tenantId}", "default")
                end

                local domain_resolver_url = "http://localhost:4200"
                local idp_logout_redirect = "http://localhost:8080"
                local deafult_tenant_id = nil
                ngx.log(ngx.STDERR, domain_resolver_url)
                ngx.log(ngx.STDERR, os.getenv("DOMAIN_RESOLVER_URL"))

                local tenant_id = ngx.var["cookie_tenantId"]

                if not tenant_id and not isempty(domain_resolver_url) then
                    return ngx.redirect(domain_resolver_url .. "?redirectUrl=" .. idp_logout_redirect)
                end

                local idp_authorize_url = "https://public-gateway-ndo-dev.ad-qa.managed.netcracker.cloud/auth/realms/{tenantId}/protocol/openid-connect/auth?response_type=code&client_id=frontend&redirect_uri=http://localhost:8080&scope=openid"

                idp_authorize_url = formatIdpUrl(idp_authorize_url, tenant_id, deafult_tenant_id)

                return ngx.redirect(idp_authorize_url)
            }
        }
    }
}
