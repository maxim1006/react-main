user  root;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
     worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    include       /etc/nginx/resolvers.conf;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

  map $http_cookie $auth_header {
    default "";
    "~*OAuth.AccessToken=(?<token>[^;]+)" "Bearer $token";
  }

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;


    server {
	    listen 8080;
		root /var/www/data/static;
		server_tokens off;
		gzip_static on;
		gzip on;
		gzip_comp_level 5;
		gzip_types application/x-javascript application/javascript text/css text/html image/jpeg image/png application/octet-stream;
		gzip_min_length   32;
	  
      location ~ \.(js|css|otf|ttf|svg)$ {
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public, max-age=31536000";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html =404;
      }
	  
	  location / {
        expires -1;
        add_header Pragma "no-cache";
        add_header Cache-Control "no-store, no-cache, must-revalicate, post-check=0 pre-check=0";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html =404;
      }

      location /favicon.ico {
            include       /etc/nginx/default_theme.conf;
            alias /usr/share/nginx/html/image/favicon.$default_theme.ico;
      }

		location /health {
            include       /etc/nginx/gateway.conf;
			subs_filter_types text/html * ;
            set $backend $gateway;
			proxy_set_header Accept-Encoding "";
			proxy_pass $backend/routes;
			proxy_intercept_errors on;
			subs_filter (.+) '{"status":"UP"}' r;
		}

        error_page 500 503 504 =200 /50.html;
		location /50.html {
			default_type application/json;
			return 200 '{"status":"DOWN", "details": "can\'t load gateway"}';
		}

	}

}
