
#user  nobody;

worker_processes  auto;

error_log  /opt/homebrew/var/log/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    #https://nginx.org/en/docs/ngx_core_module.html#worker_connections
    worker_connections  1024;
}


http {
    # Remove server info from headers
    server_tokens off;

    include       mime.types;
    default_type  application/octet-stream;

    # Proxy cache settings
    proxy_cache_path /opt/homebrew/etc/nginx/cache levels=1:2 keys_zone=resources_cache:10m max_size=200m inactive=24h use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri$cookie_LANGUAGE";

   log_format  custom ' $time_iso8601 '
    '"$request" $status $body_bytes_sent '
    '"$proxy_host$is_args$args" $upstream_addr'
    '"$http_referer" "$realpath_root" "$http_user_agent" '
    '"$http_x_forwarded_for"';

    access_log /opt/homebrew/var/log/nginx/access.log custom;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout 120;
    send_timeout 60;

    client_max_body_size 1m;
    large_client_header_buffers 4 8k;

    server {
        listen       3030;

        server_tokens off;
        gzip_static on;
        gzip on;
        gzip_proxied any;
        gzip_comp_level 5;
        gzip_types application/x-javascript application/json application/javascript text/css image/jpeg image/png application/octet-stream;
        gzip_min_length   860;
        etag off;
        if_modified_since off;

        client_body_timeout 60;
        client_header_timeout 60;

        # нужно включить nodejs сервер, причем обязательно по ip
        # пример картинки http://localhost:3030/static/media/crown.d7f74909b44c8e7db113cf8b9503dfee.svg
        set $backend "http://127.0.0.1:3001";

        include /opt/homebrew/etc/nginx/confs/add-headers.conf;

        #add recommended headers
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-Xss-Protection "0";

        #set proxy headers
        proxy_set_header Access-Control-Allow-Origin "*";
        proxy_set_header Access-Control-Allow-Methods "GET,PUT,POST,DELETE,OPTIONS";
        proxy_set_header Access-Control-Allow-Headers "Content-Type";

        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|webp|htc|woff|ttf|otf|woff2|css|js)\/?[^\/]*$ {
          proxy_cache resources_cache;
          proxy_cache_valid 12h;
          proxy_cache_revalidate on;
          proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
          proxy_cache_background_update on;
          proxy_cache_lock on;
          proxy_cache_key "$scheme$request_method$host$request_uri$cookie_LANGUAGE";

          proxy_ignore_headers Expires;
          proxy_ignore_headers X-Accel-Expires;
          proxy_ignore_headers Cache-Control;

          proxy_hide_header X-Accel-Expires;
          proxy_hide_header Expires;
          proxy_hide_header Cache-Control;
          proxy_hide_header Pragma;
          proxy_hide_header Last-Modified;
          proxy_hide_header Etag;
          proxy_hide_header X-Powered-By;
          proxy_hide_header Server;
          #           если захочу посмотреть статус прокси
          add_header X-Proxy-Cache $upstream_cache_status;
          add_header Cache-Control "public, must-revalidate";
          add_header Feature-Policy $add_header_feature_policy;
          add_header Content-Security-Policy $add_header_content_security_policy;



          expires 12h;

          proxy_pass $backend;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        location ~ ^/(?<suffix>.*)$ {
#         было так но не работает с русскими символами
#             proxy_pass $backend/$suffix$is_args$args;
# так заработает encode request URI
# if ($request_uri ~ "^/v2/([A-z0-9-]+)/(?<normalized_uri>.+)") {
# set $restendpoint $normalized_uri;
# }
#            а дальше уже можно использовать  $normalized_uri
#              proxy_pass $backend/cloud-war/services/$restendpoint;
#               или
#               location ~/([A-z0-9\-]+)/(?<restendpoint>.+) {
# в итоге оставили без доп части после $backend
            proxy_pass $backend
            proxy_set_header    Host $host;
            proxy_set_header    Forwarded "";
            proxy_redirect      off;
            proxy_hide_header   X-Frame-Options;
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            set $dr_no_redirect "true";
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
}
