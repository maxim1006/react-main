lua_shared_dict prometheus_metrics 10m;
lua_package_path "/usr/local/lib/lua/?.lua;/usr/local/lib/lua/resty/?.lua;/usr/local/lib/lua/resty/core/?.lua;/usr/local/lib/lua/nginx-lua-prometheus/?.lua;/etc/nginx/internal/lua/?.lua;/etc/nginx/internal/lua/lib/?.lua;/usr/local/share/lua/5.1/?.lua";

init_worker_by_lua_block {
    prometheus = require("prometheus").init("prometheus_metrics")
    metric_requests = prometheus:counter("http_requests_status_total", "How many HTTP requests processed, partitioned by status code, method and HTTP path.",
        {"method", "uri", "status"})
    metric_connections = prometheus:gauge("http_connections_status_total", "How many HTTP connection active now by state.", {"state"})
    metric_bytes_received = prometheus:counter("http_request_received_bytes_total", "How many bytes received from all clients.")
    metric_bytes_sent = prometheus:counter("http_request_sent_bytes_total", "How many bytes sent to all clients.")
    metric_request_duration = prometheus:histogram("http_request_time", "How long it took to process a request, partitioned by status code, method and HTTP path.",
        {"method", "uri", "status"}, {0.2, 0.8, 1})
}

log_by_lua_block {
    metric_requests:inc(1, {ngx.var.request_method, ngx.var.request_uri, ngx.var.status})
    metric_bytes_received:inc(tonumber(ngx.var.bytes_received))
    metric_bytes_sent:inc(tonumber(ngx.var.bytes_sent))
    metric_request_duration:observe(tonumber(ngx.var.request_time), {ngx.var.request_method, ngx.var.request_uri, ngx.var.status})
}
