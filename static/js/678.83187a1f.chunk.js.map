{"version":3,"file":"static/js/678.83187a1f.chunk.js","mappings":"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","sources":["pages/typescript/hooks/reducer/typescript-reducer-hooks.component.tsx","pages/typescript/hooks/typescript-hooks.component.tsx","pages/typescript/default-props/typescript-default-props.component.tsx","pages/typescript/form/typescript-form.component.tsx","pages/typescript/enum/typescript-enum.component.tsx","pages/typescript/typescript.page.tsx"],"sourcesContent":["import React, { memo } from 'react';\n\n// In Redux\n// import { Reducer } from 'redux';\n// export function reducer: Reducer<AppState, Action>() {}\n\nconst initialState = { count: 0 };\n\ntype ACTIONTYPE = { type: 'increment'; payload: number } | { type: 'decrement'; payload: string };\n\nfunction reducer(state: typeof initialState, action: ACTIONTYPE) {\n    switch (action.type) {\n        case 'increment':\n            return { count: state.count + action.payload };\n        case 'decrement':\n            return { count: state.count - Number(action.payload) };\n        default:\n            throw new Error();\n    }\n}\n\nconst TypescriptReducerHooks = () => {\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    return (\n        <>\n            Count: {state.count}\n            <button onClick={() => dispatch({ type: 'decrement', payload: '5' })}>-</button>\n            <button onClick={() => dispatch({ type: 'increment', payload: 5 })}>+</button>\n        </>\n    );\n};\n\nexport default memo(TypescriptReducerHooks);\n","import React, { memo, useEffect, useRef } from 'react';\nimport TypescriptReducerHooks from './reducer/typescript-reducer-hooks.component';\n\nconst TypescriptHooks = () => {\n    // const [user, setUser] = useState<UserModel | null>(null);\n\n    /* null! is a non-null assertion operator (the !).\n    null! is a non-null assertion operator (the !).\n    It asserts that any expression before it is not null or undefined, so if you have useRef<HTMLElement>(null!)\n    it means that you're instantiating the ref with a current value of null but lying to TypeScript that it's not null.\n     */\n    const ref1 = useRef<HTMLDivElement>(null!);\n    const ref2 = useRef<HTMLDivElement | null>(null);\n    const inputEl = useRef<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        console.log(ref1.current, ref2.current);\n        inputEl.current?.focus();\n    }, []);\n\n    return (\n        <>\n            <div ref={ref1}>Ref1</div>\n            <div ref={ref2}>Ref2</div>\n            <input ref={inputEl} type='text' />\n            <TypescriptReducerHooks />\n        </>\n    );\n};\n\nexport default memo(TypescriptHooks);\n","import React, { FC, memo } from 'react';\n\ntype GreetProps = { age?: number };\n\nconst TypescriptDefaultProps: FC<GreetProps> = ({ age = 21 }) => <>Age: {age}</>;\n\n// Если все же зачем-то нужно использовать то делаю так:\n// type TypescriptDefaultPropsProps = { age: number } & typeof defaultProps;\n//\n// const defaultProps = {\n//     age: 33,\n// };\n//\n// const TypescriptDefaultProps: FC<TypescriptDefaultPropsProps> = ({ age }) => {\n//     return <>Age: {age}</>;\n// };\n//\n// TypescriptDefaultProps.defaultProps = defaultProps;\n//\nexport default memo(TypescriptDefaultProps);\n","import React, { memo, useState } from 'react';\n\nconst TypescriptForm = () => {\n    const [name, setName] = useState<string>('');\n\n    const onNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setName(e.currentTarget.value);\n    };\n\n    return <input type='text' name='name' value={name} onChange={onNameChange} />;\n};\n\nexport default memo(TypescriptForm);\n","import React, { memo, useState } from 'react';\n\ntype TypescriptEnumProps = {};\n\nenum ColorsEnum {\n    Red = 'red',\n    Green = 'green',\n}\n\ntype TypescriptEnumChildProps = {\n    color: ColorsEnum;\n};\n\nconst TypescriptEnumChild = memo<TypescriptEnumChildProps>(({ color }) => {\n    return <div style={{ color }}>TypescriptEnum</div>;\n});\n\nconst TypescriptEnum = memo<TypescriptEnumProps>(() => {\n    const [color, setColor] = useState<ColorsEnum>(ColorsEnum.Red);\n\n    return (\n        <>\n            <select\n                onChange={e => {\n                    setColor(e.target.value as ColorsEnum);\n                }}\n            >\n                <option value='red'>red</option>\n                <option value='green'>green</option>\n            </select>\n\n            <TypescriptEnumChild color={color} />\n        </>\n    );\n});\n\nexport default TypescriptEnum;\n","import React, { memo } from 'react';\nimport MainMenu from '../../components/menu/MainMenu';\nimport { Route, Routes } from 'react-router-dom';\nimport TypescriptHooks from './hooks/typescript-hooks.component';\nimport TypescriptDefaultProps from './default-props/typescript-default-props.component';\nimport TypescriptForm from './form/typescript-form.component';\nimport TypescriptEnum from './enum/typescript-enum.component';\n\nconst TypescriptPage = () => {\n    return (\n        <>\n            <TypescriptEnum />\n            <MainMenu routes={[{ to: '/typescript/hooks', title: 'Hooks' }]} />\n            <Routes>\n                <Route path='/typescript/hooks' element={<TypescriptHooks />} />\n            </Routes>\n            <TypescriptDefaultProps />\n            <TypescriptForm />\n        </>\n    );\n};\n\nexport default memo(TypescriptPage);\n"],"names":["initialState","count","reducer","state","action","type","payload","Number","Error","TypescriptReducerHooks","dispatch","React","_jsxs","_Fragment","children","_jsx","onClick","memo","TypescriptHooks","ref1","useRef","ref2","inputEl","useEffect","_inputEl$current","console","log","current","focus","ref","TypescriptDefaultProps","_ref","age","TypescriptForm","name","setName","useState","value","onChange","e","currentTarget","ColorsEnum","TypescriptEnumChild","color","style","setColor","Red","target","TypescriptPage","TypescriptEnum","MainMenu","routes","to","title","Routes","Route","path","element"],"sourceRoot":""}