{"version":3,"file":"static/js/951.b1f31572.chunk.js","mappings":"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","sources":["constants/common.constants.ts","store/common/common.api.ts","store/counter/counter.slice.ts","store/todos/todos.slice.ts","store/visibility-filters/visibility-filters.slice.ts","store/issues-display/issues-display.slice.ts","models/issues-display.model.ts","store/posts/posts.slice.ts","store/books/books.slice.ts","constants/api.constants.ts","store/thunk-user/thunk-user.action.ts","store/thunk-user/thunk-user.model.ts","store/thunk-user/thunk-user.slice.ts","models/product.model.ts","store/product/1/product1.adapters.ts","store/product/feature/product-feature.slice.ts","store/product/1/product1.slice.ts","store/product/2/product2.adapters.ts","store/product/2/product2.slice.ts","store/product/abstract/abstract-product.actions.ts","store/product/abstract/abstract-product.slice.ts","models/header.model.ts","store/store.utils.ts","store/store.ts","store/hooks/memo-selector.hook.ts","components/redux-toolkit/posts/rt-posts.component.tsx","webpack://react-main/./src/components/redux-toolkit/user/list/user-list.module.scss?873d","webpack://react-main/./src/components/redux-toolkit/user/user.module.scss?7331","components/redux-toolkit/user/user.component.tsx","store/user/api-user.api.ts","store/user/api-user.selectors.ts","components/redux-toolkit/user/list/user-list-api.container.tsx","components/redux-toolkit/user/list/api-user-list.hook.ts","pages/Rt.page.tsx"],"sourcesContent":["export const __prod__ = process.env.NODE_ENV !== 'production';\n// это для пакета с firebase functions из папки server-ts-functions\n// прикольно что в случае CRA все переменные попадающие в приложение должны начинаться с REACT_APP_\n// сами переменные беру из client/.env\nexport const __emulate__ = Boolean(process.env.REACT_APP_EMULATE);\n\nconsole.log({ __emulate__ });\n\nexport const API_BASE_URL = __emulate__\n    ? 'http://127.0.0.1:5001/maximprosv-server-ts/us-central1/functionsApp'\n    : 'http://localhost:3005';\nexport const API_PATH = '/api/v1';\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/dist/query/react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { API_BASE_URL, API_PATH } from '@app/constants/common.constants';\n\nexport const commonApi = createApi({\n    reducerPath: 'api',\n    baseQuery: fetchBaseQuery({\n        baseUrl: `${API_BASE_URL}${API_PATH}`,\n        prepareHeaders: (headers, { extra, endpoint, getState }) => {\n            headers.set('Content-Type', 'application/json;charset=UTF-8');\n            headers.set('Authorization', 'anonymous');\n            headers.set('X-Request-ID', uuidv4());\n\n            return headers;\n        },\n    }),\n    // tagTypes1  это таг тип за которым при инвалидации будет следить кеш rtk query, типо как кеш ГКЛ\n    tagTypes: ['User'],\n    endpoints: _ => ({}),\n});\n","import { createSlice } from '@reduxjs/toolkit';\n\n// createSlice returns a \"slice\" object that contains the generated reducer function as a field named reducer,\n// and the generated action creators inside an object called actions.\n// const { actions, reducer } = counterSlice\n// const { increment, decrement } = actions\nexport const slice = createSlice({\n    name: 'counter',\n    initialState: 0,\n    reducers: {\n        incrementAction: state => state + 1,\n        decrementAction: state => state - 1,\n    },\n});\n\nexport default slice.reducer;\n\nexport const { incrementAction, decrementAction } = slice.actions;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TodoModel } from '@app/models/todo.model';\n\n// createSlice and createReducer wrap your function with produce from the Immer library.\n/** @see https://immerjs.github.io/immer/docs/introduction*/\ninterface TodosStateModel {\n    entities: TodoModel[];\n}\n\nconst initialState: TodosStateModel = {\n    entities: [],\n};\n\nconst todosSlice = createSlice({\n    name: 'todos',\n    initialState,\n    // reducers - an object, where the keys will become action type strings, and the functions are reducers that will\n    // be run when that action type is dispatched.\n    reducers: {\n        addTodoAction(state, { payload }: PayloadAction<TodoModel>) {\n            state.entities.push(payload);\n        },\n        addTodoPreparedAction: {\n            reducer: (state, { payload }: PayloadAction<TodoModel>) => {\n                const { id, text } = payload;\n                state.entities.push({ id, text, completed: false });\n            },\n            // если нужно кастомно подготовить то что прокидываю в экшн, по умолчанию все что передасться при\n            // вызове экшена попадет в пейлоад, однако если нужен кастом делаю prepare\n            prepare: (text: string): { payload: TodoModel } => ({\n                payload: { text, id: `${Math.random() * Date.now()}` },\n            }),\n        },\n        toggleTodoAction(state, { payload }: PayloadAction<string>) {\n            const todo = state.entities.find(todo => todo.id === payload);\n\n            if (todo) {\n                todo.completed = !todo.completed;\n            }\n        },\n    },\n});\n\nexport const { addTodoPreparedAction, toggleTodoAction, addTodoAction } = todosSlice.actions;\n\nexport default todosSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const visibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE',\n};\n\nconst visibilityFilterSlice = createSlice({\n    name: 'visibilityFilter',\n    initialState: visibilityFilters.SHOW_ALL,\n    reducers: {\n        setVisibilityFilterAction: (state, { payload }: PayloadAction<string>) => payload,\n    },\n});\n\nexport const { setVisibilityFilterAction } = visibilityFilterSlice.actions;\n\nexport default visibilityFilterSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {\n    IssuesDisplayModel,\n    IssuesDisplayRepoModel,\n    IssuesDisplayStateModel,\n    IssuesDisplayTypeEnum,\n} from '@app/models/issues-display.model';\n\nlet initialState: IssuesDisplayStateModel = {\n    org: 'rails',\n    repo: 'rails',\n    page: 1,\n    displayType: IssuesDisplayTypeEnum.Issues,\n    issueId: null,\n};\n\nconst issuesDisplaySlice = createSlice({\n    name: 'issuesDisplay',\n    initialState,\n    reducers: {\n        displayRepo(state, { payload }: PayloadAction<IssuesDisplayRepoModel>) {\n            const { org, repo } = payload;\n            state.org = org;\n            state.repo = repo;\n        },\n        setCurrentPage(state, action: PayloadAction<number>) {\n            state.page = action.payload;\n        },\n        setCurrentDisplayType(state, { payload }: PayloadAction<IssuesDisplayModel>) {\n            const { displayType, issueId = null } = payload;\n            state.displayType = displayType;\n            state.issueId = issueId;\n        },\n    },\n});\n\nexport const { displayRepo, setCurrentPage, setCurrentDisplayType } = issuesDisplaySlice.actions;\n\nexport default issuesDisplaySlice.reducer;\n","export enum IssuesDisplayTypeEnum {\n    Issues = 'issues',\n    Comments = 'comments',\n}\n\nexport interface IssuesDisplayModel {\n    displayType: IssuesDisplayTypeEnum;\n    issueId: number | null;\n}\n\nexport interface IssuesDisplayRepoModel {\n    org: string;\n    repo: string;\n}\n\nexport type IssuesDisplayStateModel = {\n    page: number;\n} & IssuesDisplayModel &\n    IssuesDisplayRepoModel;\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport customAxios from '../../common/api/axios';\nimport { createSelector } from 'reselect';\nimport { PostModel } from '@app/models/posts.model';\nimport { AppThunk, RootState } from '@app/store/store';\n\ninterface PostsStateModel {\n    loading: boolean;\n    entities: PostModel[];\n    error?: Error;\n}\n\nconst initialState: PostsStateModel = {\n    loading: false,\n    entities: [],\n};\n\n// 2ой способ задания thunk должен указать тут чтобы не ругался тс с последовательностью зависимостей\n// thunks redux toolkit не умеет поэтому ручками пишем (хорошие новости что включены из коробки)\nexport const fetchPostsAction1 = createAsyncThunk('posts/fetchAll', async (_, thunkApi) => {\n    try {\n        const { data: posts } = await customAxios.get<PostModel[]>('https://jsonplaceholder.typicode.com/posts');\n        return posts;\n    } catch (e) {\n        return thunkApi.rejectWithValue(e);\n    }\n});\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        fetchPostsStart(state) {\n            state.loading = true;\n        },\n        fetchPostsSuccess(state, { payload }: PayloadAction<PostModel[]>) {\n            state.entities = payload;\n            state.loading = false;\n        },\n        fetchPostsError(state, { payload }: PayloadAction<Error>) {\n            state.error = payload;\n            state.loading = false;\n        },\n    },\n    extraReducers: {\n        // это тоже самое что и builder.addCase в books\n        [fetchPostsAction1.pending.type]: (state, { payload }: PayloadAction<Error>) => {\n            state.error = payload;\n            state.loading = true;\n        },\n        [fetchPostsAction1.fulfilled.type]: (state, { payload }: PayloadAction<PostModel[]>) => {\n            state.entities = payload;\n            state.loading = false;\n        },\n        [fetchPostsAction1.rejected.type]: (state, { payload }: PayloadAction<Error>) => {\n            state.error = payload;\n            state.loading = false;\n        },\n    },\n});\n\nexport const { fetchPostsSuccess, fetchPostsError, fetchPostsStart } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n\n// selectors\nexport const selectPosts = (state: RootState): PostsStateModel => state.posts;\n\n// пример селектора если нужно его именно по типу заиспользовать чтобы не проверять на тип в разных селекторах\n// export const testProductSelector = <T>(selector: (state: TestProductStateModel) => T): ((state: RootState) => T) => {\n//     return (state: RootState) => {\n//         const product = selectProduct(state);\n//         if (product?.type === ProductTypeEnum.TEST) {\n//             return selector(state.product);\n//         } else {\n//             throw Error('Incorrect product type');\n//         }\n//     };\n// };\n// export const selectTestProp = testProductSelector(testProduct => testProduct.prop);\n\nexport const makeSelectPostsByTitle = () => {\n    return createSelector([selectPosts, (_: RootState, title: string) => title], (posts, title) => {\n        // console.log('memoized selector', { title });\n        return posts.entities?.filter(i => i.title.includes(title));\n    });\n};\n\nexport const makeSelectPostsByTitle1 = createSelector(\n    [selectPosts, (_: RootState, title: string) => title],\n    (posts, title) => {\n        return posts.entities?.filter(i => i.title.includes(title));\n    }\n);\n\n// thunks redux toolkit не умеет поэтому ручками пишем (хорошие новости что включены из коробки)\nexport const fetchPostsAction = (): AppThunk<Promise<PostModel[] | never>> => async (dispatch, getState) => {\n    dispatch(fetchPostsStart());\n    // console.log(getState());\n    try {\n        const { data: posts } = await customAxios.get<PostModel[]>('https://jsonplaceholder.typicode.com/posts');\n        dispatch(fetchPostsSuccess(posts));\n\n        return posts;\n    } catch (error) {\n        if (error instanceof Error) {\n            dispatch(fetchPostsError(error));\n        }\n        console.error('error ', error);\n        throw error;\n    }\n};\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { BookModel } from '@app/models/book.model';\nimport { RootState } from '@app/store/store';\n\n// Тут пример с createEntityAdapter\n// https://redux-toolkit.js.org/api/createEntityAdapter\nconst booksAdapter = createEntityAdapter<BookModel>({\n    // Assume IDs are stored in a field other than `book.id` в моем случае есть id\n    // selectId: (book) => book.bookId,\n    // Keep the \"all IDs\" array sorted based on book titles\n    sortComparer: (a, b) => a.title.localeCompare(b.title),\n});\n\nexport const fetchBooksAction = createAsyncThunk<BookModel[]>('books/fetchAll', async (_, thunkApi) => {\n    try {\n        const result = await Promise.resolve<BookModel[]>([\n            {\n                id: '1',\n                title: 'title1',\n            },\n            {\n                id: '2',\n                title: 'title2',\n            },\n            {\n                id: '3',\n                title: 'title3',\n            },\n        ]);\n\n        return result;\n    } catch (e) {\n        return thunkApi.rejectWithValue(e);\n    }\n});\n\n// пример с асинхронным апдейтом, есть с синхронным, первый аргумент в дженерике что вернет, второй что на вход\nexport const updateBookAsyncAction = createAsyncThunk<BookModel, BookModel>(\n    'books/updateOne',\n    async (book, thunkApi) => {\n        const response = await Promise.resolve<BookModel>(book);\n        return response;\n    }\n);\n\nconst initialState = booksAdapter.getInitialState({ loading: false }); // { entities: {} ids: [] loading: false }\n\nconst slice = createSlice({\n    name: 'books',\n    initialState,\n    reducers: {\n        removeBookAction: booksAdapter.removeOne,\n        addBookAction: booksAdapter.addOne,\n        updateBookAction: booksAdapter.updateOne,\n    },\n    extraReducers: builder => {\n        builder.addCase(fetchBooksAction.pending, (state, action) => {\n            state.loading = true;\n        });\n        builder.addCase(fetchBooksAction.fulfilled, (state, { payload }) => {\n            booksAdapter.upsertMany(state, payload);\n            state.loading = false;\n        });\n        builder.addCase(updateBookAsyncAction.fulfilled, (state, { payload }) => {\n            const { id, ...changes } = payload;\n            booksAdapter.updateOne(state, { id, changes });\n        });\n    },\n});\n\nexport default slice.reducer;\n\nexport const { removeBookAction, addBookAction, updateBookAction } = slice.actions;\n\nexport const {\n    selectById: selectBookById,\n    selectIds: selectBookIds,\n    selectEntities: selectBookEntities,\n    selectAll: selectAllBooks,\n    selectTotal: selectTotalBooks,\n} = booksAdapter.getSelectors<RootState>(state => state.books);\n\n// пример селектора если нужно его именно по типу заиспользовать чтобы не проверять на тип в разных селекторах\n// export const testProductSelector = <T>(selector: (state: TestProductStateModel) => T): ((state: RootState) => T) => {\n//     return (state: RootState) => {\n//         const product = selectProduct(state);\n//         if (product?.type === ProductTypeEnum.TEST) {\n//             return selector(state.product);\n//         } else {\n//             throw Error('Incorrect product type');\n//         }\n//     };\n// };\n// export const selectTestProp = testProductSelector(testProduct => testProduct.prop);\n","import { API_BASE_URL, API_PATH } from '@app/constants/common.constants';\n\nexport const THUNK_USERS_URL = `${API_BASE_URL}${API_PATH}/users`;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { UserModel } from '@app/models/user.model';\nimport { THUNK_USERS_URL } from '@app/constants/api.constants';\n\nexport const fetchThunkUserAction = createAsyncThunk<UserModel[]>('thunkUser/fetchAll', async (_, thunkApi) => {\n    try {\n        const response = await fetch(THUNK_USERS_URL);\n        return await response.json();\n    } catch (e) {\n        return thunkApi.rejectWithValue(e);\n    }\n});\n\nexport const addThunkUserAction = createAsyncThunk<UserModel, Partial<UserModel>>(\n    'thunkUser/add',\n    async (user, thunkApi) => {\n        try {\n            const response = await fetch(THUNK_USERS_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json;charset=utf-8',\n                },\n                body: JSON.stringify(user),\n            });\n            return await response.json();\n        } catch (e) {\n            return thunkApi.rejectWithValue(e);\n        }\n    }\n);\n\nexport const updateThunkUserAction = createAsyncThunk<UserModel, UserModel>(\n    'thunkUser/update',\n    async (user, thunkApi) => {\n        try {\n            const response = await fetch(THUNK_USERS_URL, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json;charset=utf-8',\n                },\n                body: JSON.stringify(user),\n            });\n            return await response.json();\n        } catch (e) {\n            return thunkApi.rejectWithValue(e);\n        }\n    }\n);\n\nexport const deleteThunkUserAction = createAsyncThunk<UserModel, UserModel>(\n    'thunkUser/delete',\n    async (user, thunkApi) => {\n        try {\n            const response = await fetch(`${THUNK_USERS_URL}/${user.id}`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json;charset=utf-8',\n                },\n                body: JSON.stringify(user),\n            });\n            return await response.json();\n        } catch (e) {\n            return thunkApi.rejectWithValue(e);\n        }\n    }\n);\n","import { AnyAction, AsyncThunk } from '@reduxjs/toolkit';\n\ntype GenericAsyncThunk = AsyncThunk<unknown, unknown, any>;\ntype PendingAction = ReturnType<GenericAsyncThunk['pending']>;\n\nexport function isPendingAction(action: AnyAction): action is PendingAction {\n    return action.type.endsWith('/pending');\n}\nexport function isFulfilledAction(action: AnyAction): action is PendingAction {\n    return action.type.endsWith('/fulfilled');\n}\n","import { UserModel } from '@app/models/user.model';\nimport { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '@app/store/store';\nimport {\n    addThunkUserAction,\n    deleteThunkUserAction,\n    fetchThunkUserAction,\n    updateThunkUserAction,\n} from '@app/store/thunk-user/thunk-user.action';\nimport { isFulfilledAction, isPendingAction } from '@app/store/thunk-user/thunk-user.model';\n\nconst thunkUserAdapter = createEntityAdapter<UserModel>();\n\nconst initialState = thunkUserAdapter.getInitialState({ loading: false });\n\nconst slice = createSlice({\n    name: 'thunkUser',\n    initialState,\n    reducers: {},\n    extraReducers: builder => {\n        builder.addCase(fetchThunkUserAction.fulfilled, thunkUserAdapter.upsertMany);\n        builder.addCase(addThunkUserAction.fulfilled, thunkUserAdapter.addOne);\n        builder.addCase(updateThunkUserAction.fulfilled, (state, { payload }) => {\n            const { id, ...changes } = payload;\n            thunkUserAdapter.updateOne(state, { id, changes });\n        });\n        builder.addCase(deleteThunkUserAction.fulfilled, (state, { payload }) => {\n            thunkUserAdapter.removeOne(state, payload.id);\n        });\n        builder.addMatcher(isPendingAction, state => {\n            state.loading = true;\n        });\n        builder.addMatcher(isFulfilledAction, state => {\n            state.loading = false;\n        });\n    },\n});\n\nexport default slice.reducer;\n\nexport const { selectAll: selectAllThunkUsers } = thunkUserAdapter.getSelectors<RootState>(state => state.thunkUser);\n","import { EntityState } from '@reduxjs/toolkit';\n\nexport enum ProductTypeEnum {\n    Product1 = 'product1',\n    Product2 = 'product2',\n}\n\nexport interface ProductProp {\n    id: string;\n    name: string;\n    value: string;\n}\n\n// product state model\nexport interface AbstractProductStateModel {\n    id: string;\n    type: ProductTypeEnum;\n    name: string;\n}\n\nexport interface Product1StateModel extends AbstractProductStateModel {\n    type: ProductTypeEnum.Product1;\n    // спецом так назвал так как это проперти через доп редюсер делается причем заполняется в родительском редюсере\n    product1InnerProp: EntityState<ProductProp>;\n    prop: string;\n    uniqueProduct1Prop: string;\n    productFeature: ProductFeatureStateModel;\n}\n\nexport interface Product2StateModel extends AbstractProductStateModel {\n    type: ProductTypeEnum.Product2;\n    uniqueProduct2Prop: string;\n    product2InnerProp: EntityState<ProductProp>;\n    prop: string;\n}\n\nexport type ProductStateModel = Product1StateModel | Product2StateModel;\n\n// product configuration model - это модели для модификации стейта (то что прокидываю в экшенах)\nexport interface AbstractProductConfigurationModel {\n    type: ProductTypeEnum;\n    id: string;\n    version: number;\n}\n\nexport interface Product1ConfigurationModel extends AbstractProductConfigurationModel {\n    type: ProductTypeEnum.Product1;\n    name: string;\n    version: number;\n}\n\nexport interface Product2ConfigurationModel extends AbstractProductConfigurationModel {\n    type: ProductTypeEnum.Product2;\n    name: string;\n    version: number;\n}\n\nexport type ProductConfigurationModel = Product1ConfigurationModel | Product2ConfigurationModel;\n///////////////////////////////////////////////\n\n// это модели для шаренных между стейтами доп редюсерах (находятся в extraReducers) у продуктов\nexport interface ProductFeatureStateModel {\n    id: string;\n    name: string;\n}\n\nexport type ProductConfigurationsModel = Record<string, ProductConfigurationModel>;\n\nexport enum Product1ResettableKeys {\n    Product1Key = 'Product1Key',\n}\n\nexport enum Product2ResettableKeys {\n    Product2Key = 'Product2Key',\n}\n\nexport type ProductResettableKeys = Product1ResettableKeys[] | Product2ResettableKeys[];\n","import { createEntityAdapter } from '@reduxjs/toolkit';\nimport { ProductProp } from '@app/models/product.model';\n\nexport const product1InnerPropAdapter = createEntityAdapter<ProductProp>();\n\nexport const product1InnerPropAdapterInitialState = product1InnerPropAdapter.getInitialState();\n\nconsole.log({ product1InnerPropAdapterInitialState });\n","import { ProductFeatureStateModel } from '@app/models/product.model';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nconst initialState: ProductFeatureStateModel = null;\n\nconst slice = createSlice({\n    name: 'product/feature',\n    initialState,\n    reducers: {\n        setProductFeatureNameAction(state, action: PayloadAction<string>) {\n            state.name = action.payload;\n        },\n    },\n});\n\nexport const productFeatureReducer = slice.reducer;\n\nexport const { setProductFeatureNameAction } = slice.actions;\n","import { Product1StateModel, ProductProp } from '@app/models/product.model';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { product1InnerPropAdapter } from '@app/store/product/1/product1.adapters';\nimport { productFeatureReducer } from '@app/store/product/feature/product-feature.slice';\n\nconst initialState: Product1StateModel = {} as Product1StateModel;\n\nconst slice = createSlice({\n    name: 'product/product1',\n    initialState,\n    reducers: {\n        setProduct1innerPropAction(state, action: PayloadAction<ProductProp[]>) {\n            product1InnerPropAdapter.setMany(state.product1InnerProp, action.payload);\n        },\n        setProduct1PropAction(state, action: PayloadAction<string>) {\n            state.prop = action.payload;\n        },\n    },\n    extraReducers: builder => {\n        // тут можно сделать inner state property у которой будет свой reducer\n        builder.addDefaultCase((state, action) => {\n            productFeatureReducer(state, action);\n        });\n    },\n});\n\nexport const product1Reducer = slice.reducer;\n\nexport const { setProduct1innerPropAction, setProduct1PropAction } = slice.actions;\n","import { createEntityAdapter } from '@reduxjs/toolkit';\nimport { ProductProp } from '@app/models/product.model';\n\nexport const product2InnerPropAdapter = createEntityAdapter<ProductProp>({});\nexport const product2InnerPropAdapterInitialState = product2InnerPropAdapter.getInitialState();\n","import { Product2StateModel, ProductProp } from '@app/models/product.model';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { productFeatureReducer } from '@app/store/product/feature/product-feature.slice';\nimport { product2InnerPropAdapter } from '@app/store/product/2/product2.adapters';\n\nconst initialState: Product2StateModel = null;\n\nconst slice = createSlice({\n    name: 'product/product2',\n    initialState,\n    reducers: {\n        setProduct2innerPropAction(state, action: PayloadAction<ProductProp[]>) {\n            product2InnerPropAdapter.setMany(state.product2InnerProp, action.payload);\n        },\n    },\n    extraReducers: builder => {\n        // тут можно сделать inner state property у которой будет свой reducer\n        builder.addDefaultCase((state, action) => {\n            productFeatureReducer(state, action);\n        });\n    },\n});\n\nexport const product2Reducer = slice.reducer;\n\nexport const { setProduct2innerPropAction } = slice.actions;\n","import { createAction } from '@reduxjs/toolkit';\nimport { ProductConfigurationModel, ProductResettableKeys } from '@app/models/product.model';\n\n// это общие экшены, их могу использовать в  extraReducers(builder) { builder.addCase(\nexport const setProductAction = createAction<ProductConfigurationModel>('product/setProductAction');\nexport const resetProductAction = createAction<ProductResettableKeys>('product/resetProductAction');\n","import { AnyAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ProductConfigurationModel, ProductStateModel, ProductTypeEnum } from '@app/models/product.model';\nimport { product1Reducer } from '@app/store/product/1/product1.slice';\nimport { product2Reducer } from '@app/store/product/2/product2.slice';\nimport { product1InnerPropAdapterInitialState } from '@app/store/product/1/product1.adapters';\nimport { setProductAction } from '@app/store/product/abstract/abstract-product.actions';\n\nconst initialState: ProductStateModel = {\n    // тут надо добавить исходный продукт иначе не сработает action из product.container\n    type: ProductTypeEnum.Product1,\n    // если не засечу тут то получу ошибку относительно этих пропертей ids of undefined\n    product1InnerProp: product1InnerPropAdapterInitialState,\n\n    // type: ProductTypeEnum.Product2,\n    // product2InnerProp: product2InnerPropAdapter.getInitialState(),\n} as ProductStateModel;\n\nconst callSpecificProductReducer = (state: ProductStateModel, action: AnyAction) => {\n    switch (state?.type) {\n        case ProductTypeEnum.Product1:\n            return product1Reducer(state, action);\n        case ProductTypeEnum.Product2:\n            return product2Reducer(state, action);\n    }\n};\n\nconst slice = createSlice({\n    name: 'product',\n    initialState,\n    reducers: {\n        setProductTypeAction(state, action: PayloadAction<ProductTypeEnum>) {\n            state.type = action.payload;\n        },\n    },\n    extraReducers(builder) {\n        builder.addCase(\n            setProductAction,\n            (state: ProductStateModel, action: PayloadAction<ProductConfigurationModel>) => {\n                return { ...state, ...action.payload } as ProductStateModel;\n            }\n        );\n        builder.addDefaultCase((state, action) => {\n            return callSpecificProductReducer(state, action);\n        });\n    },\n});\n\nexport const { setProductTypeAction } = slice.actions;\n\nexport const abstractProductReducer = slice.reducer;\n","export enum HeadersEnum {\n    XRequestId = 'x-request-id',\n}\n","import { Middleware, MiddlewareAPI } from 'redux';\nimport { AnyAction, isRejected } from '@reduxjs/toolkit';\nimport { HeadersEnum } from '@app/models/header.model';\n\nexport enum RequestErrorNameEnum {\n    ConditionError = 'ConditionError',\n}\n\nconst NOTIFICATION_BLACK_LIST: string[] = [];\n\nexport const rtkQueryErrorLogger: Middleware = (api: MiddlewareAPI) => next => action => {\n    let headersReq = action.meta?.baseQueryMeta?.request?.headers;\n    let headersRes = action.meta?.baseQueryMeta?.response?.headers;\n\n    if (isRejected(action)) {\n        if (headersReq) {\n            for (let i of headersReq) {\n                console.log('headersReq', i);\n            }\n        }\n\n        if (headersRes) {\n            for (let i of headersRes) {\n                console.log('headersRes', i);\n            }\n        }\n\n        // RequestErrorNameEnum.ConditionError - RTK Query internal error, that just means that another request was skipped because there was either already a request in flight or already a value in cache, so no request needs to be made. This is an internal rejection that RTK-Query uses to track component subscriptions and not an error.\n        if (\n            action.error.name !== RequestErrorNameEnum.ConditionError &&\n            !NOTIFICATION_BLACK_LIST.includes(action.meta.arg?.endpointName)\n        ) {\n            // тут можно вызывать нотификашку например\n            logRequestError(action);\n        }\n    }\n\n    return next(action);\n};\n\n// helpers\nfunction logRequestError(action: AnyAction) {\n    const meta = action.meta;\n\n    if (!meta) return console.error(\"logRequestError Action doesn't contain 'meta'\", action);\n\n    const { request, response } = meta.baseQueryMeta;\n\n    if (!request && !response) return console.error(`Request/response error: ${meta.baseQueryMeta}`);\n\n    const { method, url } = request ?? {};\n    const { status, statusText } = response ?? {};\n\n    const requestHeaders = action.meta?.baseQueryMeta?.request?.headers || [];\n\n    const xRequestId = [...requestHeaders].find(([header]) => header === HeadersEnum.XRequestId)?.[1];\n\n    console.group(`ERROR: ${method} ${url}`);\n    console.log(`STATUS: ${status}`);\n    console.log(`STATUS-TEXT: ${statusText}`);\n    console.log(`X-REQUEST-ID: ${xRequestId}`);\n\n    if (meta.arg) console.log(`RTK QUERY: ${meta.arg.type} ${meta.arg.endpointName}`);\n\n    if (action.payload) {\n        console.groupCollapsed('PAYLOAD');\n        console.log(JSON.stringify(action.payload, null, 4));\n        console.groupEnd();\n    }\n\n    console.groupEnd();\n}\n","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport { reduxBatch } from '@manaflair/redux-batch';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { combineReducers } from 'redux';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { commonApi } from '@app/store/common/common.api';\nimport counter from './counter/counter.slice';\nimport todos from './todos/todos.slice';\nimport visibilityFilter from './visibility-filters/visibility-filters.slice';\nimport issuesDisplay from './issues-display/issues-display.slice';\nimport posts from './posts/posts.slice';\nimport books from './books/books.slice';\nimport thunkUser from './thunk-user/thunk-user.slice';\nimport { abstractProductReducer } from '@app/store/product/abstract/abstract-product.slice';\nimport { rtkQueryErrorLogger } from '@app/store/store.utils';\n\nconst DEFAULT_FETCH_POLICY_FROM_GQL = 'cache-first';\n\n// автоматически подцепляет дев тулы\n\n// через стандартные редюсеры\n// const store = configureStore({\n//     reducer: counterReducer\n// });\n\n// const middleware = [...getDefaultMiddleware(), logger];\n//\nconst preloadedState = {};\n\nconst persistConfig = {\n    key: 'root',\n    version: 1,\n    storage,\n    // по умолчанию в локалсторадж складывает все, тут указываю что конкретно, также есть blackList\n    whitelist: ['todos'],\n};\n\nconst rootReducer = combineReducers({\n    counter,\n    todos,\n    visibilityFilter,\n    issuesDisplay,\n    posts,\n    books,\n    thunkUser,\n    product: abstractProductReducer,\n    [commonApi.reducerPath]: commonApi.reducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n    reducer: persistedReducer,\n    preloadedState,\n    middleware: getDefaultMiddleware =>\n        getDefaultMiddleware({\n            thunk: {\n                extraArgument: { fetchPolicy: DEFAULT_FETCH_POLICY_FROM_GQL },\n            },\n            immutableCheck: false,\n            serializableCheck: {\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n            },\n        })\n            // Turn on logger if u need\n            // logger,\n            // тут обязательно надо через конкат иначе ругается на него тайпскрипт, причем тупо на type в AppThunk почемуто\n            .concat(commonApi.middleware, rtkQueryErrorLogger),\n    devTools: process.env.NODE_ENV !== 'production',\n    enhancers: [reduxBatch],\n});\n\nexport const persistor = persistStore(store);\n\n// через слайсы без persist\n// const store = configureStore({\n//     reducer: rootReducer,\n//     middleware,\n//     preloadedState,\n//     devTools: process.env.NODE_ENV !== 'production',\n//     enhancers: [reduxBatch],\n// });\n\n// if (process.env.NODE_ENV === 'development' && module.hot) {\n//     module.hot.accept('./slices', () => {\n//         const newRootReducer = require('./slices').default;\n//         store.replaceReducer(newRootReducer);\n//     });\n// }\n\nexport default store;\n\n// можно и так\n// export type RootState = ReturnType<typeof rootReducer>;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// пара хуков для работы (необязательно так как обычно использую AppDispatch в дженерике диспатч но все же)\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n// остальные это кастомные типы для работы с thunk\n// так как часто использую сразу вынесу сюда чтобы не копи пастить\n// export type appThunk = ThunkAction<void, RootState, unknown, Action<string>>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, { fetchPolicy: {} }, Action<string>>;\n// export type EnhancedAction<T, R> = (id: string) => (payload: T) => AppThunk<Promise<R>>;\n","import { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\n\nexport function useMemoSelector<TState = unknown, TSelected = unknown, TArgs = any>(\n    selector: () => (state: TState, ...args: TArgs[]) => TSelected,\n    ...args: TArgs[]\n) {\n    const memoSelector = useMemo(selector, [selector]);\n    return useSelector((state: TState) => memoSelector(state, ...args));\n}\n","import { Fragment, memo, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    fetchPostsAction,\n    fetchPostsAction1,\n    makeSelectPostsByTitle,\n    makeSelectPostsByTitle1,\n    selectPosts,\n} from '@app/store/posts/posts.slice';\nimport { useAppDispatch, useAppSelector } from '@app/store/store';\nimport MaterialLoaderComponent from '../../loader/MaterialLoader';\nimport { useMemoSelector } from '@app/store/hooks/memo-selector.hook';\n\nconst RtPosts = () => {\n    const [state, setState] = useState('');\n    const dispatch = useAppDispatch();\n\n    const { loading, entities, error } = useSelector(selectPosts);\n\n    // https://react-redux.js.org/api/hooks#using-memoizing-selectors\n    // пример селекта по id\n    // const selectItemsByCategory = useMemo(makeSelectRtPostsByTitle, []);\n    // const itemsByTitle = useAppSelector(state => selectItemsByCategory(state, 'a'));\n\n    // тоже что и выше только через кастомный хук\n    // const itemsByTitleMemo = useMemoSelector(makeSelectPostsByTitle, 'a');\n    // const itemsByTitleMemo = useMemoSelector(makeSelectPostsByTitle, 'a');\n\n    useEffect(() => {\n        (async () => {\n            //  пример thunk возвращает промис с результатом запроса, круто чтобы чейнинг использовать !!!\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const posts = await dispatch(fetchPostsAction());\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const posts1 = await dispatch(fetchPostsAction1());\n            // console.log({\n            //     posts,\n            //     posts1,\n            // });\n        })();\n    }, [dispatch]);\n\n    if (error) return <>{error}</>;\n\n    return loading ? (\n        <MaterialLoaderComponent />\n    ) : (\n        <ul>\n            {/*Тут пример с мемоизированными селекторами в компонентах vs просто createSelector, вывод - мемоизированный вызовется только когда меняется входная проперти, itemsByTitleMemo1 будет вызываться каждый раз. Обрати внимание что пропертя передается только в Child и меняется там, во втором она типо должна закешироваться что  не срабатывает для itemsByTitleMemo1*/}\n            <button onClick={() => setState(i => (i += 'a'))}>Click</button>\n\n            <Child prop={state} />\n            <Child1 />\n            {entities.slice(0, 5).map(({ id, title, body }) => (\n                <li style={{ margin: 10 }} key={id}>\n                    <h5>{title}</h5>\n                    <p>{body}</p>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction Child({ prop }: { prop: string }) {\n    const itemsByTitleMemo = useMemoSelector(makeSelectPostsByTitle, prop);\n    const itemsByTitleMemo1 = useAppSelector(state => makeSelectPostsByTitle1(state, prop));\n    // console.log('Child rerender');\n    return (\n        <>\n            {itemsByTitleMemo1.map(i => (\n                <Fragment key={i.id}>{i.title}</Fragment>\n            ))}\n            {itemsByTitleMemo.map(i => (\n                <Fragment key={i.id}>{i.title}</Fragment>\n            ))}\n        </>\n    );\n}\n\nfunction Child1({ prop = 'a' }: { prop?: string }) {\n    const itemsByTitleMemo = useMemoSelector(makeSelectPostsByTitle, prop);\n    const itemsByTitleMemo1 = useAppSelector(state => makeSelectPostsByTitle1(state, prop));\n    // console.log('Child1 rerender');\n    return (\n        <>\n            {itemsByTitleMemo1.map(i => (\n                <Fragment key={i.id}>{i.title}</Fragment>\n            ))}\n            {itemsByTitleMemo.map(i => (\n                <Fragment key={i.id}>{i.title}</Fragment>\n            ))}\n        </>\n    );\n}\n\nexport default memo(RtPosts);\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"user-list_block__yGNeD\",\"list\":\"user-list_list__cbBd9\",\"listItem\":\"user-list_listItem__5zIaF\",\"button\":\"user-list_button__paQSC\"};","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"user_user__D2osa\"};","import React, { memo, useState } from 'react';\nimport { UserModel } from '@app/models/user.model';\n\nimport styles from './user.module.scss';\n\ntype MyUserProps = {\n    model: UserModel;\n    deleteUser?: (user: UserModel) => void;\n    updateUser?: (user: UserModel) => void;\n};\n\nconst MyUser = memo<MyUserProps>(function MyUser({ model, deleteUser, updateUser }) {\n    const { name } = model;\n    const [edit, setEdit] = useState<boolean>();\n    const [value, setValue] = useState(name);\n    const [active, setActive] = useState(false);\n\n    return edit ? (\n        <div className={styles.user}>\n            <input\n                type='text'\n                value={value}\n                onChange={e => {\n                    const value = e.target.value.trim();\n                    if (value) {\n                        setValue(value);\n                    }\n                }}\n            />\n            <button\n                type='button'\n                onClick={() => {\n                    if (value) {\n                        updateUser?.({ ...model, name: value });\n                    }\n                }}\n            >\n                Update\n            </button>\n            <button\n                onClick={() => {\n                    setEdit(false);\n                }}\n                type='button'\n            >\n                Cancel\n            </button>\n        </div>\n    ) : (\n        <div className={styles.user} onClick={() => setActive(i => !i)}>\n            <div>{name}</div>\n            {active && (\n                <>\n                    <button\n                        onClick={() => {\n                            setEdit(true);\n                        }}\n                        type='button'\n                    >\n                        Edit\n                    </button>\n                    <button onClick={() => deleteUser?.(model)} type='button'>\n                        Delete\n                    </button>\n                </>\n            )}\n        </div>\n    );\n});\n\nexport default MyUser;\n","import { UserModel } from '@app/models/user.model';\nimport { commonApi } from '../common/common.api';\nimport { MaybePromise } from '@reduxjs/toolkit/dist/query/tsHelpers';\nimport { debounce } from 'lodash';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { FetchArgs, FetchBaseQueryError, FetchBaseQueryMeta } from '@reduxjs/toolkit/query';\nimport { QueryReturnValue } from '@reduxjs/toolkit/dist/query/baseQueryTypes';\n\nexport const apiUserApi = commonApi.injectEndpoints({\n    endpoints: build => ({\n        fetchUserList: build.query<UserModel[], void>({\n            query: () => ({\n                url: `users`,\n            }),\n        }),\n        fetchUser: build.query<UserModel, { userId: string }>({\n            async queryFn({ userId }, { dispatch, getState }, __, fetchWithBQ) {\n                const result = await fetchWithBQ({\n                    url: `users/${userId}`,\n                    method: 'GET',\n                });\n\n                // тут обязательно возвращаю result так как в нем meta,\n                // обработка в общем middleware\n                if (result.error) return result;\n\n                const data = result.data as UserModel;\n\n                return { data };\n            },\n            // disable cache\n            // keepUnusedDataFor: 0,\n        }),\n        addUser: build.mutation<UserModel, { user: Partial<UserModel> }>({\n            query: ({ user }) => ({\n                url: `users`,\n                method: 'POST',\n                body: user,\n            }),\n            async onQueryStarted({ user }, { dispatch, queryFulfilled }) {\n                // Pessimistic Updates\n                try {\n                    const { data: newUser } = await queryFulfilled;\n                    dispatch(\n                        apiUserApi.util.updateQueryData('fetchUserList', undefined, userList => {\n                            userList.push(newUser);\n                        })\n                    );\n                } catch {\n                    console.error('addUser onQueryStarted error');\n                }\n            },\n        }),\n        addUserDebounced: build.mutation<UserModel, { user: Partial<UserModel> }>({\n            async queryFn({ user }, { dispatch, getState }, __, fetchWithBQ) {\n                // Pessimistic Updates\n                const data = (await debouncedAddUser(user, dispatch, fetchWithBQ)) ?? null;\n\n                return { data };\n            },\n        }),\n        updateUser: build.mutation<UserModel, { user: UserModel }>({\n            query: ({ user }) => ({\n                url: `users`,\n                method: 'PUT',\n                body: user,\n            }),\n            async onQueryStarted({ user }, { dispatch, queryFulfilled }) {\n                // Optimistic update\n                const updateResult = dispatch(\n                    apiUserApi.util.updateQueryData('fetchUserList', undefined, userList => {\n                        const userIndex = userList.findIndex(item => item.id === user.id);\n                        userList[userIndex] = user;\n                    })\n                );\n                try {\n                    await queryFulfilled;\n                } catch {\n                    updateResult.undo();\n                }\n            },\n        }),\n        deleteUser: build.mutation<UserModel, UserModel>({\n            async queryFn(user, { dispatch, getState }, __, fetchWithBQ) {\n                // const state = getState() as RootState;\n\n                const result = await fetchWithBQ({\n                    url: `users/${user.id}`,\n                    method: 'DELETE',\n                });\n\n                // тут обязательно возвращаю result так как в нем meta\n                if (result.error) return result;\n\n                const data = result.data as UserModel;\n\n                // Pessimistic Updates\n                dispatch(\n                    apiUserApi.util.updateQueryData('fetchUserList', undefined, userList => {\n                        return userList.filter(userFromList => userFromList.id !== user.id);\n                    })\n                );\n\n                return { data };\n            },\n        }),\n    }),\n});\n\nconst debouncedAddUser = debounce(\n    async (\n        user: Partial<UserModel>,\n        dispatch: ThunkDispatch<any, any, any>,\n        fetchWithBQ: (\n            arg: string | FetchArgs\n        ) => MaybePromise<QueryReturnValue<unknown, FetchBaseQueryError, FetchBaseQueryMeta>>\n    ) => {\n        // Pessimistic Updates\n        const result = await fetchWithBQ({\n            url: `users`,\n            method: 'POST',\n            body: user,\n        });\n\n        if (result.error) throw result.error;\n\n        const data = result.data as UserModel;\n\n        dispatch(\n            apiUserApi.util.updateQueryData('fetchUserList', undefined, userList => {\n                userList.push(data);\n            })\n        );\n\n        return data;\n    },\n    1000\n);\n","import { apiUserApi } from '@app/store/user/api-user.api';\nimport { RootState } from '@app/store/store';\n\nexport const apiUserApiFetchUserListLoading = (state: RootState) =>\n    apiUserApi.endpoints.fetchUserList.select()(state).isLoading;\n","import React, { FC, memo } from 'react';\nimport styles from './user-list.module.scss';\nimport MyUser from '@app/components/redux-toolkit/user/user.component';\nimport { useApiUserList } from '@app/components/redux-toolkit/user/list/api-user-list.hook';\n\ntype UserListApiContainerProps = {};\n\nconst UserListApiContainer: FC<UserListApiContainerProps> = () => {\n    const {\n        ref,\n        users,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        usersLoading,\n        usersLoading2,\n        addUserLoading,\n        addUserDebouncedLoading,\n        deleteUserLoading,\n        updateUserLoading,\n        onAddUser,\n        onAddUserDebounced,\n        onUpdateUser,\n        onDeleteUser,\n        onFetchUserLazy,\n        onPollingStart,\n        onPollingEnd,\n    } = useApiUserList();\n\n    return (\n        <>\n            <div>\n                <button type='button' className={styles.button} onClick={onPollingStart}>\n                    Start Polling\n                </button>\n                <button type='button' className={styles.button} onClick={onPollingEnd}>\n                    End Polling\n                </button>\n                <button type='button' className={styles.button} onClick={onFetchUserLazy}>\n                    Fetch Lazy User)\n                </button>\n            </div>\n            <div className={styles.block}>\n                <input type='text' ref={ref} placeholder='User Name' />\n                <button type='button' className={styles.button} onClick={onAddUser}>\n                    Add user\n                </button>\n                <button type='button' className={styles.button} onClick={onAddUserDebounced}>\n                    Add Debounced user\n                </button>\n            </div>\n            <div className={styles.block}>\n                {usersLoading2 ||\n                addUserLoading ||\n                deleteUserLoading ||\n                updateUserLoading ||\n                addUserDebouncedLoading ? (\n                    <>Loading...</>\n                ) : (\n                    <ul className={styles.list}>\n                        {users.map(user => (\n                            <li className={styles.listItem} key={user.id}>\n                                <MyUser model={user} updateUser={onUpdateUser} deleteUser={onDeleteUser} />\n                            </li>\n                        ))}\n                    </ul>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default memo(UserListApiContainer);\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { UserModel } from '@app/models/user.model';\nimport { apiUserApi } from '@app/store/user/api-user.api';\nimport { useSelector } from 'react-redux';\nimport { apiUserApiFetchUserListLoading } from '@app/store/user/api-user.selectors';\n\nexport function useApiUserList() {\n    const [pollingInterval, setPollingInterval] = useState(0);\n\n    const { data: users = [], isLoading: usersLoading } = apiUserApi.useFetchUserListQuery();\n\n    // тоже что и usersLoading но получается напрямую из api\n    const usersLoading2 = useSelector(apiUserApiFetchUserListLoading);\n\n    const {\n        data: user,\n        isLoading: userLoading,\n        isFetching: userFetching,\n    } = apiUserApi.useFetchUserQuery(\n        { userId: users[0]?.id ?? null },\n        {\n            pollingInterval,\n\n            // skip, // скипнуть при условии\n            // refetchOnMountOrArgChange: true // насильно делать запрос\n        }\n    );\n    const [fetchUserLazy, lazyUser] = apiUserApi.useLazyFetchUserQuery();\n\n    /*\n    RTK Query provides an option to share results across mutation hook instances using the fixedCacheKey option. Any useMutation hooks with the same fixedCacheKey string will share results between each other when any of the trigger functions are called. This should be a unique string shared between each mutation hook instance you wish to share results.\n     */\n    const [addUser, { isLoading: addUserLoading }] = apiUserApi.useAddUserMutation({ fixedCacheKey: 'userMutation' });\n    const [addUserDebounced, { isLoading: addUserDebouncedLoading }] = apiUserApi.useAddUserDebouncedMutation({\n        fixedCacheKey: 'userMutation',\n    });\n    const [deleteUser, { isLoading: deleteUserLoading }] = apiUserApi.useDeleteUserMutation({\n        fixedCacheKey: 'userMutation',\n    });\n    const [updateUser, { isLoading: updateUserLoading }] = apiUserApi.useUpdateUserMutation({\n        fixedCacheKey: 'userMutation',\n    });\n\n    const ref = useRef<HTMLInputElement>(null);\n\n    const onAddUser = useCallback(() => {\n        const value = ref.current?.value.trim();\n\n        if (value)\n            addUser({\n                user: { name: value },\n            });\n    }, [addUser]);\n\n    const onAddUserDebounced = useCallback(() => {\n        const value = ref.current?.value.trim();\n\n        if (value)\n            addUserDebounced({\n                user: { name: value },\n            });\n    }, [addUserDebounced]);\n\n    const onFetchUserLazy = useCallback(async () => {\n        const lazyUser = await fetchUserLazy({ userId: users[0]?.id ?? null });\n        console.log({ lazyUser });\n    }, [fetchUserLazy, users]);\n\n    const onUpdateUser = useCallback(\n        async (user: UserModel) => {\n            const updatedUser = await updateUser({ user })\n                .unwrap()\n                .catch(e => console.log(e));\n\n            console.log({ updatedUser });\n        },\n        [updateUser]\n    );\n    const onDeleteUser = useCallback(\n        async (user: UserModel) => {\n            let res;\n\n            res = await deleteUser(user);\n\n            if ('error' in res) {\n                console.error('delete use error');\n            }\n\n            // alternative\n            // try {\n            //     res = await deleteUser(user).unwrap();\n            // } catch (e) {\n            //     console.error('delete use error');\n            // }\n\n            console.log(res);\n        },\n        [deleteUser]\n    );\n\n    useEffect(() => {\n        console.log({ user, userLoading, userFetching });\n    }, [user, userLoading, userFetching]);\n\n    useEffect(() => {\n        console.log({ addUserLoading, deleteUserLoading, updateUserLoading, addUserDebouncedLoading });\n    }, [addUserLoading, deleteUserLoading, updateUserLoading, addUserDebouncedLoading]);\n\n    useEffect(() => {\n        // будет вызываться каждый раз на каждый запрос за лейзи\n        console.log('in useEffect ', { lazyUser });\n    }, [lazyUser]);\n\n    const onPollingStart = useCallback(async () => setPollingInterval(1000), []);\n    const onPollingEnd = useCallback(async () => setPollingInterval(0), []);\n\n    return {\n        ref,\n        users,\n        usersLoading,\n        usersLoading2,\n        addUserLoading,\n        deleteUserLoading,\n        updateUserLoading,\n        addUserDebouncedLoading,\n        onAddUser,\n        onAddUserDebounced,\n        onDeleteUser,\n        onUpdateUser,\n        onFetchUserLazy,\n        onPollingStart,\n        onPollingEnd,\n    };\n}\n","import React, { memo } from 'react';\nimport { Provider } from 'react-redux';\nimport store, { persistor } from '../store/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport RtPosts from '@app/components/redux-toolkit/posts/rt-posts.component';\nimport UserListApiContainer from '@app/components/redux-toolkit/user/list/user-list-api.container';\n\nconst Rt = () => {\n    return (\n        <Provider store={store}>\n            {/* должен обернуть в гейт чтобы подгрузилась инфа из локал сторадж*/}\n            <PersistGate loading={null} persistor={persistor}>\n                {/*<ProductContainer />*/}\n                <UserListApiContainer />\n                {/*<UserListThunkContainer />*/}\n                {/*<RtBooksContainer />*/}\n                {/*<RtUsersContainer />*/}\n                {/*<RtUsersContainer1 />*/}\n                {/*<RtCounter />*/}\n                {/*<RtTodos />*/}\n                {/*<RtIssuesDisplay />*/}\n                <RtPosts />\n            </PersistGate>\n        </Provider>\n    );\n};\n\nexport default memo(Rt);\n"],"names":["__emulate__","Boolean","process","REACT_APP_EMULATE","console","log","API_BASE_URL","API_PATH","commonApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","concat","prepareHeaders","headers","_ref","extra","endpoint","getState","set","uuidv4","tagTypes","endpoints","_","slice","createSlice","name","initialState","reducers","incrementAction","state","decrementAction","_slice$actions","actions","todosSlice","entities","addTodoAction","payload","push","addTodoPreparedAction","reducer","_ref2","id","text","completed","prepare","Math","random","Date","now","toggleTodoAction","_ref3","todo","find","_todosSlice$actions","visibilityFilterSlice","setVisibilityFilterAction","org","repo","page","displayType","IssuesDisplayTypeEnum","Issues","issueId","issuesDisplaySlice","displayRepo","setCurrentPage","action","setCurrentDisplayType","_payload$issueId","_issuesDisplaySlice$a","fetchPostsAction1","createAsyncThunk","_asyncToGenerator","_regeneratorRuntime","mark","_callee","thunkApi","_yield$customAxios$ge","posts","wrap","_context","prev","next","customAxios","get","sent","data","abrupt","t0","rejectWithValue","stop","_x","_x2","apply","arguments","postsSlice","loading","fetchPostsStart","fetchPostsSuccess","fetchPostsError","error","extraReducers","_extraReducers","_defineProperty","pending","type","_ref4","fulfilled","_ref5","rejected","_ref6","_postsSlice$actions","selectPosts","makeSelectPostsByTitle","createSelector","title","_posts$entities","filter","i","includes","makeSelectPostsByTitle1","_posts$entities2","booksAdapter","createEntityAdapter","sortComparer","a","b","localeCompare","fetchBooksAction","result","Promise","resolve","updateBookAsyncAction","_callee2","book","response","_context2","_x3","_x4","getInitialState","removeBookAction","removeOne","addBookAction","addOne","updateBookAction","updateOne","builder","addCase","upsertMany","changes","_objectWithoutProperties","_excluded","_booksAdapter$getSele","getSelectors","books","THUNK_USERS_URL","selectById","selectIds","selectEntities","selectAll","selectTotal","fetchThunkUserAction","fetch","json","addThunkUserAction","user","method","body","JSON","stringify","updateThunkUserAction","_callee3","_context3","_x5","_x6","deleteThunkUserAction","_callee4","_context4","_x7","_x8","isPendingAction","endsWith","isFulfilledAction","thunkUserAdapter","addMatcher","thunkUser","ProductTypeEnum","product1InnerPropAdapter","product1InnerPropAdapterInitialState","setProductFeatureNameAction","productFeatureReducer","setProduct1innerPropAction","setMany","product1InnerProp","setProduct1PropAction","prop","addDefaultCase","product1Reducer","product2InnerPropAdapter","setProduct2innerPropAction","product2InnerProp","product2Reducer","setProductAction","createAction","Product1","setProductTypeAction","_objectSpread","Product2","callSpecificProductReducer","abstractProductReducer","HeadersEnum","RequestErrorNameEnum","NOTIFICATION_BLACK_LIST","rtkQueryErrorLogger","api","_action$meta","_action$meta$baseQuer","_action$meta$baseQuer2","_action$meta2","_action$meta2$baseQue","_action$meta2$baseQue2","headersReq","meta","baseQueryMeta","request","headersRes","isRejected","_action$meta$arg","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","f","_step2","_iterator2","ConditionError","arg","endpointName","_action$meta3","_action$meta3$baseQue","_action$meta3$baseQue2","_find","_meta$baseQueryMeta","url","status","statusText","requestHeaders","xRequestId","_toConsumableArray","_slicedToArray","XRequestId","group","groupCollapsed","groupEnd","logRequestError","persistConfig","key","version","storage","whitelist","rootReducer","combineReducers","counter","todos","visibilityFilter","issuesDisplay","product","persistedReducer","persistReducer","store","configureStore","preloadedState","middleware","getDefaultMiddleware","thunk","extraArgument","fetchPolicy","immutableCheck","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","enhancers","reduxBatch","persistor","persistStore","useAppSelector","useSelector","useMemoSelector","selector","_len","length","args","Array","_key","memoSelector","useMemo","RtPosts","_useState","useState","_useState2","setState","dispatch","useDispatch","_useSelector","useEffect","_ref7","_yield$customAxios$ge2","Error","_jsx","_Fragment","children","MaterialLoaderComponent","_jsxs","onClick","Child","Child1","map","style","margin","itemsByTitleMemo","itemsByTitleMemo1","Fragment","_ref4$prop","memo","model","deleteUser","updateUser","edit","setEdit","_useState3","_useState4","setValue","_useState5","_useState6","active","setActive","className","styles","onChange","target","trim","apiUserApi","injectEndpoints","build","fetchUserList","query","fetchUser","queryFn","__","fetchWithBQ","userId","addUser","mutation","onQueryStarted","queryFulfilled","_yield$queryFulfilled","newUser","util","updateQueryData","undefined","userList","addUserDebounced","_yield$debouncedAddUs","debouncedAddUser","t1","t2","_ref8","_ref9","_ref10","updateResult","userIndex","findIndex","item","undo","_ref11","_callee5","_context5","userFromList","debounce","_ref12","_callee6","_context6","apiUserApiFetchUserListLoading","select","isLoading","UserListApiContainer","_useApiUserList","_users$0$id","_users$","pollingInterval","setPollingInterval","_apiUserApi$useFetchU","useFetchUserListQuery","_apiUserApi$useFetchU2","users","usersLoading","usersLoading2","_apiUserApi$useFetchU3","useFetchUserQuery","userLoading","userFetching","isFetching","_apiUserApi$useLazyFe","useLazyFetchUserQuery","_apiUserApi$useLazyFe2","fetchUserLazy","lazyUser","_apiUserApi$useAddUse","useAddUserMutation","fixedCacheKey","_apiUserApi$useAddUse2","addUserLoading","_apiUserApi$useAddUse3","useAddUserDebouncedMutation","_apiUserApi$useAddUse4","addUserDebouncedLoading","_apiUserApi$useDelete","useDeleteUserMutation","_apiUserApi$useDelete2","deleteUserLoading","_apiUserApi$useUpdate","useUpdateUserMutation","_apiUserApi$useUpdate2","updateUserLoading","ref","useRef","onAddUser","useCallback","_ref$current","current","onAddUserDebounced","_ref$current2","onFetchUserLazy","_users$0$id2","_users$2","onUpdateUser","updatedUser","unwrap","catch","onDeleteUser","res","onPollingStart","onPollingEnd","useApiUserList","placeholder","MyUser","Rt","Provider","PersistGate"],"sourceRoot":""}