{"version":3,"file":"static/js/200.67c797bd.chunk.js","mappings":"2JAOO,MAAMA,EAAoBC,EAAAA,cAA4C,CAAC,GAOjEC,EAAqBC,IAAoD,IAAnD,SAAEC,EAAQ,OAAEC,GAAiCF,EAC5E,MAAMG,GAAeC,EAAAA,EAAAA,UACjB,MACIF,YAEJ,CAACA,IAGL,OAAOG,EAAAA,EAAAA,KAACR,EAAkBS,SAAQ,CAACC,MAAOJ,EAAaF,SAAEA,GAAsC,ECpB5F,IAAKO,EAAwB,SAAxBA,GAAwB,OAAxBA,EAAwB,cAAxBA,EAAwB,sBAAxBA,EAAwB,4BAAxBA,CAAwB,MCC7B,MAAMC,EAA0D,CACnEC,KAAMF,EAAyBG,KAC/BC,OAAOP,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAZ,SAAE,SACTa,WAAWC,EAAAA,EAAAA,OAAK,IAAM,gCAGbC,EAA2D,CACpEN,KAAMF,EAAyBS,MAC/BL,OAAOP,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAZ,SAAE,UACTa,WAAWC,EAAAA,EAAAA,OAAK,IAAM,iCAGbG,EAA2D,CACpER,KAAMF,EAAyBW,MAC/BP,OAAOP,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAZ,SAAE,UACTa,WAAWC,EAAAA,EAAAA,OAAK,IAAM,iC,cCd1B,MAAMK,EAAyCpB,IAAmB,IAAlB,SAAEC,GAAUD,EACxD,MAAM,OAAEE,IAAWmB,EAAAA,EAAAA,YAAWxB,GAI9B,OAFAyB,QAAQC,IAAI,CAAErB,YAGVsB,EAAAA,EAAAA,MAAAX,EAAAA,SAAA,CAAAZ,SAAA,CACKA,GACDI,EAAAA,EAAAA,KAACoB,EAAAA,GAAM,CAAAxB,SACFC,EAAOwB,KAAIC,IACRtB,EAAAA,EAAAA,KAACuB,EAAAA,GAAK,CAAkBlB,KAAMiB,EAAMjB,KAAMmB,QAAS/B,EAAAA,cAAoB6B,EAAMb,YAAjEa,EAAMjB,YAG3B,EAIX,GAAeoB,EAAAA,EAAAA,MAAKV,G,uBChBpB,MAAMW,EAAkEA,KAC7D1B,EAAAA,EAAAA,KAAA,OAAK2B,UAAWC,IAAG,gCAAgChC,SAAC,+BAG/D,GAAe6B,EAAAA,EAAAA,MAAKC,GCDdG,EAAoEA,KACtE,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAIjB,OAFAhB,QAAQC,IAAI,+BAAgC,CAAEY,WAAUE,cAIpDhC,EAAAA,EAAAA,KAACe,EAAe,CAAAnB,UACZI,EAAAA,EAAAA,KAAA,OAAAJ,UACII,EAAAA,EAAAA,KAACoB,EAAAA,GAAM,CAAAxB,UAEHI,EAAAA,EAAAA,KAACuB,EAAAA,GAAK,CAAClB,KAAMF,EAAyBG,KAAMkB,SAASxB,EAAAA,EAAAA,KAAC0B,EAA0B,WAG1E,EAI1B,GAAeD,EAAAA,EAAAA,MAAKI,GCpBdK,EAAgEA,KAClE,MAAMrC,GCCCE,EAAAA,EAAAA,UAAQ,IACJ,CAACK,EAAiCO,EAAkCE,IAC5E,IDDH,OAEIM,EAAAA,EAAAA,MAACzB,EAAkB,CAACG,OAAQA,EAAOD,SAAA,CAAC,0JAEhCI,EAAAA,EAAAA,KAAC6B,EAA2B,MACX,EAI7B,GAAeJ,EAAAA,EAAAA,MAAKS,E","sources":["components/router/full/full-router.provider.tsx","components/router/full/full-router.model.tsx","components/router/full/full-router.constants.tsx","components/router/full/full-router-proxy.component.tsx","components/router/full/general/full-router-general.container.tsx","components/router/full/route1/path/full-router-route1-path-wrapper.container.tsx","components/router/full/route1/full-router-route1.container.tsx","components/router/full/route1/full-router-route1-routes.hook.ts"],"sourcesContent":["import React, { ReactNode, useMemo } from 'react';\nimport { FullRouterRoutingModel } from '@app/components/router/full/full-router.model';\n\ninterface FullRouterContextModel {\n    routes: FullRouterRoutingModel[];\n}\n\nexport const FullRouterContext = React.createContext<FullRouterContextModel>({} as FullRouterContextModel);\n\ntype FullRouterProviderProps = {\n    routes: FullRouterRoutingModel[];\n    children: ReactNode;\n};\n\nexport const FullRouterProvider = ({ children, routes }: FullRouterProviderProps) => {\n    const contextValue = useMemo(\n        () => ({\n            routes,\n        }),\n        [routes]\n    );\n\n    return <FullRouterContext.Provider value={contextValue}>{children}</FullRouterContext.Provider>;\n};\n","import { ComponentType } from 'react';\n\nexport enum FullRouterRoute1PathEnum {\n    Path = '/:path', // http://localhost:3000/full-router/path\n    Path1 = '/:path/:path1',\n    Path2 = '/:path/:path1/path2',\n}\n\nexport enum FullRouterRoute2PathEnum {\n    Path = '/:path',\n    Path1 = '/:path/:path1',\n    Path2 = '/:path/:path1/path2',\n}\n\nexport type FullRouterRoutingPath = FullRouterRoute1PathEnum | FullRouterRoute2PathEnum;\n\nexport interface FullRouterRoutingModel {\n    path: FullRouterRoutingPath;\n    title: JSX.Element;\n    component: ComponentType;\n}\n","import { FullRouterRoute1PathEnum, FullRouterRoutingModel } from '@app/components/router/full/full-router.model';\nimport { lazy } from 'react';\n\nexport const FULL_ROUTER_ROUTE1_PATH_ROUTING: FullRouterRoutingModel = {\n    path: FullRouterRoute1PathEnum.Path,\n    title: <>Path</>,\n    component: lazy(() => import('@app/components/router/full/route1/path/full-router-route1-path.container')),\n};\n\nexport const FULL_ROUTER_ROUTE1_PATH1_ROUTING: FullRouterRoutingModel = {\n    path: FullRouterRoute1PathEnum.Path1,\n    title: <>Path1</>,\n    component: lazy(() => import('@app/components/router/full/route1/path/full-router-route1-path1.container')),\n};\n\nexport const FULL_ROUTER_ROUTE1_PATH2_ROUTING: FullRouterRoutingModel = {\n    path: FullRouterRoute1PathEnum.Path2,\n    title: <>Path2</>,\n    component: lazy(() => import('@app/components/router/full/route1/path/full-router-route1-path2.container')),\n};\n","import React, { FC, memo, PropsWithChildren, useContext } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { FullRouterContext } from '@app/components/router/full/full-router.provider';\n\nconst FullRouterProxy: FC<PropsWithChildren> = ({ children }) => {\n    const { routes } = useContext(FullRouterContext);\n\n    console.log({ routes });\n\n    return (\n        <>\n            {children}\n            <Routes>\n                {routes.map(route => (\n                    <Route key={route.path} path={route.path} element={React.createElement(route.component)} />\n                ))}\n            </Routes>\n        </>\n    );\n};\n\nexport default memo(FullRouterProxy);\n","import React, { memo, FC } from 'react';\nimport cn from 'classnames';\n\ntype FullRouterGeneralContainerProps = {};\n\nconst FullRouterGeneralContainer: FC<FullRouterGeneralContainerProps> = () => {\n    return <div className={cn('taFullRouterGeneralContainer')}>FullRouterGeneralContainer</div>;\n};\n\nexport default memo(FullRouterGeneralContainer);\n","import React, { FC, memo } from 'react';\nimport { Route, Routes, useLocation, useNavigate } from 'react-router-dom';\nimport FullRouterProxy from '@app/components/router/full/full-router-proxy.component';\nimport FullRouterGeneralContainer from '@app/components/router/full/general/full-router-general.container';\nimport { FullRouterRoute1PathEnum } from '@app/components/router/full/full-router.model';\n\ntype FullRouterRoute1PathWrapperProps = {};\n\nconst FullRouterRoute1PathWrapper: FC<FullRouterRoute1PathWrapperProps> = () => {\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    console.log('FullRouterRoute1PathWrapper ', { navigate, location });\n\n    return (\n        // вот этот прокси нужен для того чтобы отрисовать все paths\n        <FullRouterProxy>\n            <div>\n                <Routes>\n                    {/* тут могу использовать место для верхнего меню например или для любыйх компонент по конкретному роуту*/}\n                    <Route path={FullRouterRoute1PathEnum.Path} element={<FullRouterGeneralContainer />} />\n                </Routes>\n            </div>\n        </FullRouterProxy>\n    );\n};\n\nexport default memo(FullRouterRoute1PathWrapper);\n","import React, { FC, memo } from 'react';\nimport { FullRouterProvider } from '@app/components/router/full/full-router.provider';\nimport { useFullRouterRoute1Routes } from '@app/components/router/full/route1/full-router-route1-routes.hook';\nimport FullRouterRoute1PathWrapper from '@app/components/router/full/route1/path/full-router-route1-path-wrapper.container';\n\ntype FullRouterRoute1ContainerProps = {};\n\nconst FullRouterRoute1Container: FC<FullRouterRoute1ContainerProps> = () => {\n    const routes = useFullRouterRoute1Routes();\n\n    return (\n        // провайдер нужен чтобы сложить туда главные path роуты и дальше прокинуть их в FullRouterProxy внутри FullRouterRoute1PathWrapper\n        <FullRouterProvider routes={routes}>\n            Это верхнеуровневый route1 http://localhost:3000/full-router\n            <FullRouterRoute1PathWrapper />\n        </FullRouterProvider>\n    );\n};\n\nexport default memo(FullRouterRoute1Container);\n","import { FullRouterRoutingModel } from '@app/components/router/full/full-router.model';\nimport { useMemo } from 'react';\nimport {\n    FULL_ROUTER_ROUTE1_PATH1_ROUTING,\n    FULL_ROUTER_ROUTE1_PATH2_ROUTING,\n    FULL_ROUTER_ROUTE1_PATH_ROUTING,\n} from '@app/components/router/full/full-router.constants';\n\nexport function useFullRouterRoute1Routes(): FullRouterRoutingModel[] {\n    return useMemo(() => {\n        return [FULL_ROUTER_ROUTE1_PATH_ROUTING, FULL_ROUTER_ROUTE1_PATH1_ROUTING, FULL_ROUTER_ROUTE1_PATH2_ROUTING];\n    }, []);\n}\n"],"names":["FullRouterContext","React","FullRouterProvider","_ref","children","routes","contextValue","useMemo","_jsx","Provider","value","FullRouterRoute1PathEnum","FULL_ROUTER_ROUTE1_PATH_ROUTING","path","Path","title","_Fragment","component","lazy","FULL_ROUTER_ROUTE1_PATH1_ROUTING","Path1","FULL_ROUTER_ROUTE1_PATH2_ROUTING","Path2","FullRouterProxy","useContext","console","log","_jsxs","Routes","map","route","Route","element","memo","FullRouterGeneralContainer","className","cn","FullRouterRoute1PathWrapper","navigate","useNavigate","location","useLocation","FullRouterRoute1Container"],"sourceRoot":""}