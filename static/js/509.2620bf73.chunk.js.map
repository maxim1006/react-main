{"version":3,"file":"static/js/509.2620bf73.chunk.js","mappings":"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","sources":["constants/common.constants.ts","store/common/common.api.ts","store/counter/counter.slice.ts","store/todos/todos.slice.ts","store/user/api-user.api.ts","store/user/api-user.slice.ts","store/visibility-filters/visibility-filters.slice.ts","models/issues-display.model.ts","store/issues-display/issues-display.slice.ts","store/posts/posts.slice.ts","store/books/books.slice.ts","constants/api.constants.ts","store/thunk-user/thunk-user.action.ts","store/thunk-user/thunk-user.model.ts","store/thunk-user/thunk-user.slice.ts","models/product.model.ts","store/product/1/product1.adapters.ts","store/product/feature/product-feature.slice.ts","store/product/1/product1.slice.ts","store/product/2/product2.adapters.ts","store/product/2/product2.slice.ts","store/product/abstract/abstract-product.actions.ts","store/product/abstract/abstract-product.slice.ts","models/header.model.ts","store/store.utils.ts","store/store.ts","store/store-with-protected-actions/store-with-protected-actions.ts","store/store-with-protected-actions/store-with-protected-actions.selectors.ts","components/store-with-protected-actions/store-with-protected-actions.component.tsx","pages/Rt.page.tsx"],"sourcesContent":["export const __prod__ = process.env.NODE_ENV !== 'production';\n// это для пакета с firebase functions из папки server-ts-functions\n// прикольно что в случае CRA все переменные попадающие в приложение должны начинаться с REACT_APP_\n// сами переменные беру из client/.env\nexport const __emulate__ = Boolean(process.env.REACT_APP_EMULATE);\n\nconsole.log({ __emulate__ });\n\nexport const API_BASE_URL = __emulate__\n    ? 'http://127.0.0.1:5001/maximprosv-server-ts/us-central1/functionsApp'\n    : 'http://localhost:3005';\nexport const API_PATH = '/api/v1';\n","import { v4 as uuidv4 } from 'uuid';\nimport { API_BASE_URL, API_PATH } from '@app/constants/common.constants';\n\n// !!!!!!!!!!!!!!!!!!!! https://stackoverflow.com/questions/69502501/redux-rtk-not-auto-generating-react-hooks\n// охренеть обязательно @reduxjs/toolkit/query/react вместо @reduxjs/toolkit/query\n//https://github.com/reduxjs/redux-toolkit/issues/4537#issuecomment-2260938954\n// все надо импортить из @reduxjs/toolkit/query/react\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const commonApi = createApi({\n    reducerPath: 'api',\n    baseQuery: fetchBaseQuery({\n        baseUrl: `${API_BASE_URL}${API_PATH}`,\n        // const { extra, endpoint, getState } = api\n        prepareHeaders: (headers, _api) => {\n            headers.set('Content-Type', 'application/json;charset=UTF-8');\n            headers.set('Authorization', 'anonymous');\n            headers.set('X-Request-ID', uuidv4());\n\n            return headers;\n        },\n    }),\n    // tagTypes1  это таг тип за которым при инвалидации будет следить кеш rtk query, типо как кеш ГКЛ\n    // tagTypes: ['User'],\n    endpoints: _ => ({}),\n});\n","import { createSlice } from '@reduxjs/toolkit';\n\n// createSlice returns a \"slice\" object that contains the generated reducer function as a field named reducer,\n// and the generated action creators inside an object called actions.\n// const { actions, reducer } = counterSlice\n// const { increment, decrement } = actions\nexport const slice = createSlice({\n    name: 'counter',\n    initialState: 0,\n    reducers: {\n        incrementAction: state => state + 1,\n        decrementAction: state => state - 1,\n    },\n});\n\nexport default slice.reducer;\n\nexport const { incrementAction, decrementAction } = slice.actions;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TodoModel } from '@app/models/todo.model';\n\n// createSlice and createReducer wrap your function with produce from the Immer library.\n/** @see https://immerjs.github.io/immer/docs/introduction*/\ninterface TodosStateModel {\n    entities: TodoModel[];\n}\n\nconst initialState: TodosStateModel = {\n    entities: [],\n};\n\nconst todosSlice = createSlice({\n    name: 'todos',\n    initialState,\n    // reducers - an object, where the keys will become action type strings, and the functions are reducers that will\n    // be run when that action type is dispatched.\n    reducers: {\n        addTodoAction(state, { payload }: PayloadAction<TodoModel>) {\n            state.entities.push(payload);\n        },\n        addTodoPreparedAction: {\n            reducer: (state, { payload }: PayloadAction<TodoModel>) => {\n                const { id, text } = payload;\n                state.entities.push({ id, text, completed: false });\n            },\n            // если нужно кастомно подготовить то что прокидываю в экшн, по умолчанию все что передасться при\n            // вызове экшена попадет в пейлоад, однако если нужен кастом делаю prepare\n            prepare: (text: string): { payload: TodoModel } => ({\n                payload: { text, id: `${Math.random() * Date.now()}` },\n            }),\n        },\n        toggleTodoAction(state, { payload }: PayloadAction<string>) {\n            const todo = state.entities.find(todo => todo.id === payload);\n\n            if (todo) {\n                todo.completed = !todo.completed;\n            }\n        },\n    },\n});\n\nexport const { addTodoPreparedAction, toggleTodoAction, addTodoAction } = todosSlice.actions;\n\nexport default todosSlice.reducer;\n","import { UserModel } from '@app/models/user.model';\nimport { commonApi } from '../common/common.api';\nimport { debounce } from 'lodash';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { FetchArgs, FetchBaseQueryError, FetchBaseQueryMeta, QueryReturnValue } from '@reduxjs/toolkit/query/react';\nimport { RootState } from '@app/store/store';\n\ntype MaybePromise<T> = T | PromiseLike<T>;\n\nexport const apiUserApi = commonApi.injectEndpoints({\n    endpoints: build => ({\n        fetchUserList: build.query<UserModel[], void>({\n            query: () => ({\n                url: `users`,\n            }),\n        }),\n        fetchUser: build.query<UserModel, { userId: string | undefined | null }>({\n            async queryFn({ userId }, { dispatch: _dispatch, getState }, __, fetchWithBQ) {\n                const _state = getState() as RootState;\n\n                const result = await fetchWithBQ({\n                    url: `users/${userId}`,\n                    method: 'GET',\n                });\n\n                // тут обязательно возвращаю result так как в нем meta,\n                // обработка в общем middleware\n                if (result.error) return result;\n\n                const data = result.data as UserModel;\n\n                // получить статус запроса в сторе\n                // console.log('fetchUser status from store ', apiUserApi.endpoints.fetchUser.select({ userId })(state));\n\n                return { data };\n            },\n            // disable cache\n            // keepUnusedDataFor: 0,\n        }),\n        addUser: build.mutation<UserModel, { user: Partial<UserModel> }>({\n            query: ({ user }) => ({\n                url: `users`,\n                method: 'POST',\n                body: user,\n            }),\n            async onQueryStarted({ user: _user }, { dispatch, queryFulfilled }) {\n                // Pessimistic Updates\n                try {\n                    const { data: newUser } = await queryFulfilled;\n                    dispatch(\n                        apiUserApi.util.updateQueryData('fetchUserList', undefined, userList => {\n                            userList.push(newUser);\n                        }),\n                    );\n                } catch {\n                    console.error('addUser onQueryStarted error');\n                }\n            },\n        }),\n        addUserDebounced: build.mutation<UserModel, { user: Partial<UserModel> } & { cancelDebounce?: boolean }>({\n            async queryFn(\n                { user, cancelDebounce: _cancelDebounce },\n                { dispatch, getState: _getState },\n                __,\n                fetchWithBQ,\n            ) {\n                // если вдруг захочу сбросить pending debounce\n                // if (cancelDebounce) {\n                //     debouncedAddUser.cancel();\n                // }\n\n                // Pessimistic Updates\n                const data = (await debouncedAddUser(user, dispatch, fetchWithBQ)) ?? null;\n\n                return { data };\n            },\n        }),\n        updateUser: build.mutation<UserModel, { user: UserModel }>({\n            query: ({ user }) => ({\n                url: `users`,\n                method: 'PUT',\n                body: user,\n            }),\n            async onQueryStarted({ user }, { dispatch, queryFulfilled }) {\n                // Optimistic update\n                const updateResult = dispatch(\n                    apiUserApi.util.updateQueryData('fetchUserList', undefined, userList => {\n                        const userIndex = userList.findIndex(item => item.id === user.id);\n                        userList[userIndex] = user;\n                    }),\n                );\n                try {\n                    await queryFulfilled;\n                } catch {\n                    updateResult.undo();\n                }\n            },\n        }),\n        deleteUser: build.mutation<UserModel, UserModel>({\n            async queryFn(user, { dispatch, getState: _getState }, __, fetchWithBQ) {\n                // const state = getState() as RootState;\n\n                const result = await fetchWithBQ({\n                    url: `users/${user.id}`,\n                    method: 'DELETE',\n                });\n\n                // тут обязательно возвращаю result так как в нем meta\n                if (result.error) return result;\n\n                const data = result.data as UserModel;\n\n                // Pessimistic Updates\n                dispatch(\n                    apiUserApi.util.updateQueryData('fetchUserList', undefined, userList => {\n                        return userList.filter(userFromList => userFromList.id !== user.id);\n                    }),\n                );\n\n                return { data };\n            },\n        }),\n    }),\n    overrideExisting: true,\n});\n\nconst debouncedAddUser = debounce(\n    async (\n        user: Partial<UserModel>,\n        dispatch: ThunkDispatch<any, any, any>,\n        fetchWithBQ: (\n            arg: string | FetchArgs,\n        ) => MaybePromise<QueryReturnValue<unknown, FetchBaseQueryError, FetchBaseQueryMeta>>,\n    ) => {\n        // Pessimistic Updates\n        const result = await fetchWithBQ({\n            url: `users`,\n            method: 'POST',\n            body: user,\n        });\n\n        if (result.error) throw result.error;\n\n        const data = result.data as UserModel;\n\n        dispatch(\n            apiUserApi.util.updateQueryData('fetchUserList', undefined, userList => {\n                userList.push(data);\n            }),\n        );\n\n        return data;\n    },\n    1000,\n    { leading: true },\n);\n","import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { UserModel } from '@app/models/user.model';\nimport { apiUserApi } from '@app/store/user/api-user.api';\nimport { RootState } from '@app/store/store';\n\n// это пример как красиво прокидывать в стейт то что пришло из rtk query\nconst usersApiAdapter = createEntityAdapter<UserModel, UserModel['id']>({\n    selectId: (user: UserModel) => user.id, // Указываем, какое поле является ID\n    sortComparer: (a, b) => {\n        if (!a.name || !b.name) return 0;\n\n        return a.name.localeCompare(b.name);\n    }, // Сортировка по имени (опционально)\n});\n\nconst usersApiSlice = createSlice({\n    name: 'users',\n    initialState: usersApiAdapter.getInitialState<{ loading: boolean | undefined }>({\n        loading: undefined,\n    }),\n    reducers: {\n        // Здесь можно добавить дополнительные редюсеры, если нужно\n    },\n    extraReducers: builder => {\n        builder.addMatcher(apiUserApi.endpoints.fetchUserList.matchFulfilled, (state, action) => {\n            // При успешном запросе нормализуем данные с помощью адаптера\n            usersApiAdapter.setAll(state, action.payload);\n            state.loading = false;\n        });\n        builder.addMatcher(apiUserApi.endpoints.fetchUserList.matchPending, state => {\n            state.loading = true;\n        });\n        builder.addMatcher(apiUserApi.endpoints.fetchUserList.matchRejected, state => {\n            state.loading = false;\n        });\n    },\n});\n\nexport const {\n    selectAll: selectAllApiUsers,\n    selectById: selectApiUserById,\n    selectIds: selectApiUserIds,\n} = usersApiAdapter.getSelectors((state: RootState) => state.users);\n\nexport default usersApiSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const visibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE',\n};\n\nconst visibilityFilterSlice = createSlice({\n    name: 'visibilityFilter',\n    initialState: visibilityFilters.SHOW_ALL,\n    reducers: {\n        setVisibilityFilterAction: (_state, { payload }: PayloadAction<string>) => payload,\n    },\n});\n\nexport const { setVisibilityFilterAction } = visibilityFilterSlice.actions;\n\nexport default visibilityFilterSlice.reducer;\n","export enum IssuesDisplayTypeEnum {\n    Issues = 'issues',\n    Comments = 'comments',\n}\n\nexport interface IssuesDisplayModel {\n    displayType: IssuesDisplayTypeEnum;\n    issueId: number | null;\n}\n\nexport interface IssuesDisplayRepoModel {\n    org: string;\n    repo: string;\n}\n\nexport type IssuesDisplayStateModel = {\n    page: number;\n} & IssuesDisplayModel &\n    IssuesDisplayRepoModel;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {\n    IssuesDisplayModel,\n    IssuesDisplayRepoModel,\n    IssuesDisplayStateModel,\n    IssuesDisplayTypeEnum,\n} from '@app/models/issues-display.model';\n\nlet initialState: IssuesDisplayStateModel = {\n    org: 'rails',\n    repo: 'rails',\n    page: 1,\n    displayType: IssuesDisplayTypeEnum.Issues,\n    issueId: null,\n};\n\nconst issuesDisplaySlice = createSlice({\n    name: 'issuesDisplay',\n    initialState,\n    reducers: {\n        displayRepo(state, { payload }: PayloadAction<IssuesDisplayRepoModel>) {\n            const { org, repo } = payload;\n            state.org = org;\n            state.repo = repo;\n        },\n        setCurrentPage(state, action: PayloadAction<number>) {\n            state.page = action.payload;\n        },\n        setCurrentDisplayType(state, { payload }: PayloadAction<IssuesDisplayModel>) {\n            const { displayType, issueId = null } = payload;\n            state.displayType = displayType;\n            state.issueId = issueId;\n        },\n    },\n});\n\nexport const { displayRepo, setCurrentPage, setCurrentDisplayType } = issuesDisplaySlice.actions;\n\nexport default issuesDisplaySlice.reducer;\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport customAxios from '../../common/api/axios';\nimport { createSelector } from 'reselect';\nimport { PostModel } from '@app/models/posts.model';\nimport { AppThunk, RootState } from '@app/store/store';\n\ninterface PostsStateModel {\n    loading: boolean;\n    entities: PostModel[];\n    error?: Error;\n}\n\nconst initialState: PostsStateModel = {\n    loading: false,\n    entities: [],\n};\n\n// 2ой способ задания thunk должен указать тут чтобы не ругался тс с последовательностью зависимостей\n// thunks redux toolkit не умеет поэтому ручками пишем (хорошие новости что включены из коробки)\nexport const fetchPostsAction1 = createAsyncThunk('posts/fetchAll', async (_, thunkApi) => {\n    try {\n        const { data: posts } = await customAxios.get<PostModel[]>('https://jsonplaceholder.typicode.com/posts');\n        return posts;\n    } catch (e) {\n        return thunkApi.rejectWithValue(e);\n    }\n});\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        fetchPostsStart(state) {\n            state.loading = true;\n        },\n        fetchPostsSuccess(state, { payload }: PayloadAction<PostModel[]>) {\n            state.entities = payload;\n            state.loading = false;\n        },\n        fetchPostsError(state, { payload }: PayloadAction<Error>) {\n            state.error = payload;\n            state.loading = false;\n        },\n    },\n    // extraReducers: {\n    //     // это тоже самое что и builder.addCase в books\n    //     [fetchPostsAction1.pending.type]: (state: PostsStateModel, { payload }: PayloadAction<Error>) => {\n    //         state.error = payload;\n    //         state.loading = true;\n    //     },\n    //     [fetchPostsAction1.fulfilled.type]: (state: PostsStateModel, { payload }: PayloadAction<PostModel[]>) => {\n    //         state.entities = payload;\n    //         state.loading = false;\n    //     },\n    //     [fetchPostsAction1.rejected.type]: (state: PostsStateModel, { payload }: PayloadAction<Error>) => {\n    //         state.error = payload;\n    //         state.loading = false;\n    //     },\n    // } as any,\n});\n\nexport const { fetchPostsSuccess, fetchPostsError, fetchPostsStart } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n\n// selectors\nexport const selectPosts = (state: RootState): PostsStateModel => state.posts;\n\n// пример селектора если нужно его именно по типу заиспользовать чтобы не проверять на тип в разных селекторах\n// export const testProductSelector = <T>(selector: (state: TestProductStateModel) => T): ((state: RootState) => T) => {\n//     return (state: RootState) => {\n//         const product = selectProduct(state);\n//         if (product?.type === ProductTypeEnum.TEST) {\n//             return selector(state.product);\n//         } else {\n//             throw Error('Incorrect product type');\n//         }\n//     };\n// };\n// export const selectTestProp = testProductSelector(testProduct => testProduct.prop);\n\nexport const makeSelectPostsByTitle = () => {\n    return createSelector([selectPosts, (_: RootState, title: string) => title], (posts, title) => {\n        // console.log('memoized selector', { title });\n        return posts.entities?.filter(i => i.title.includes(title));\n    });\n};\n\nexport const makeSelectPostsByTitle1 = createSelector(\n    [selectPosts, (_: RootState, title: string) => title],\n    (posts, title) => {\n        return posts.entities?.filter(i => i.title.includes(title));\n    },\n);\n\n// thunks redux toolkit не умеет поэтому ручками пишем (хорошие новости что включены из коробки)\nexport const fetchPostsAction = (): AppThunk<Promise<PostModel[] | never>> => async (dispatch, _getState) => {\n    dispatch(fetchPostsStart());\n    // console.log(getState());\n    try {\n        const { data: posts } = await customAxios.get<PostModel[]>('https://jsonplaceholder.typicode.com/posts');\n        dispatch(fetchPostsSuccess(posts));\n\n        return posts;\n    } catch (error) {\n        if (error instanceof Error) {\n            dispatch(fetchPostsError(error));\n        }\n        console.error('error ', error);\n        throw error;\n    }\n};\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { BookModel } from '@app/models/book.model';\nimport { RootState } from '@app/store/store';\n\n// Тут пример с createEntityAdapter\n// https://redux-toolkit.js.org/api/createEntityAdapter\nconst booksAdapter = createEntityAdapter<BookModel, BookModel['id']>({\n    // Assume IDs are stored in a field other than `book.id` в моем случае есть id\n    selectId: book => book.id,\n    // Keep the \"all IDs\" array sorted based on book titles\n    sortComparer: (a, b) => a.title.localeCompare(b.title),\n});\n\nexport const fetchBooksAction = createAsyncThunk<BookModel[]>('books/fetchAll', async (_, thunkApi) => {\n    try {\n        const result = await Promise.resolve<BookModel[]>([\n            {\n                id: '1',\n                title: 'title1',\n            },\n            {\n                id: '2',\n                title: 'title2',\n            },\n            {\n                id: '3',\n                title: 'title3',\n            },\n        ]);\n\n        return result;\n    } catch (e) {\n        return thunkApi.rejectWithValue(e);\n    }\n});\n\n// пример с асинхронным апдейтом, есть с синхронным, первый аргумент в дженерике что вернет, второй что на вход\nexport const updateBookAsyncAction = createAsyncThunk<BookModel, BookModel>(\n    'books/updateOne',\n    async (book, _thunkApi) => {\n        const response = await Promise.resolve<BookModel>(book);\n        return response;\n    },\n);\n\nconst initialState = booksAdapter.getInitialState({ loading: false }); // { entities: {} ids: [] loading: false }\n\nconst slice = createSlice({\n    name: 'books',\n    initialState,\n    reducers: {\n        removeBookAction: booksAdapter.removeOne,\n        addBookAction: booksAdapter.addOne,\n        updateBookAction: booksAdapter.updateOne,\n    },\n    extraReducers: builder => {\n        builder.addCase(fetchBooksAction.pending, (state, _action) => {\n            state.loading = true;\n        });\n        builder.addCase(fetchBooksAction.fulfilled, (state, { payload }) => {\n            booksAdapter.upsertMany(state, payload);\n            state.loading = false;\n        });\n        builder.addCase(updateBookAsyncAction.fulfilled, (state, { payload }) => {\n            const { id, ...changes } = payload;\n            booksAdapter.updateOne(state, { id, changes });\n        });\n    },\n});\n\nexport default slice.reducer;\n\nexport const { removeBookAction, addBookAction, updateBookAction } = slice.actions;\n\nexport const {\n    selectById: selectBookById,\n    selectIds: selectBookIds,\n    selectEntities: selectBookEntities,\n    selectAll: selectAllBooks,\n    selectTotal: selectTotalBooks,\n} = booksAdapter.getSelectors<RootState>(state => state.books);\n\n// пример селектора если нужно его именно по типу заиспользовать чтобы не проверять на тип в разных селекторах\n// export const testProductSelector = <T>(selector: (state: TestProductStateModel) => T): ((state: RootState) => T) => {\n//     return (state: RootState) => {\n//         const product = selectProduct(state);\n//         if (product?.type === ProductTypeEnum.TEST) {\n//             return selector(state.product);\n//         } else {\n//             throw Error('Incorrect product type');\n//         }\n//     };\n// };\n// export const selectTestProp = testProductSelector(testProduct => testProduct.prop);\n","import { API_BASE_URL, API_PATH } from '@app/constants/common.constants';\n\nexport const THUNK_USERS_URL = `${API_BASE_URL}${API_PATH}/users`;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { UserModel } from '@app/models/user.model';\nimport { THUNK_USERS_URL } from '@app/constants/api.constants';\n\nexport const fetchThunkUserAction = createAsyncThunk<UserModel[]>('thunkUser/fetchAll', async (_, thunkApi) => {\n    try {\n        const response = await fetch(THUNK_USERS_URL);\n        return await response.json();\n    } catch (e) {\n        return thunkApi.rejectWithValue(e);\n    }\n});\n\nexport const addThunkUserAction = createAsyncThunk<UserModel, Partial<UserModel>>(\n    'thunkUser/add',\n    async (user, thunkApi) => {\n        try {\n            const response = await fetch(THUNK_USERS_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json;charset=utf-8',\n                },\n                body: JSON.stringify(user),\n            });\n            return await response.json();\n        } catch (e) {\n            return thunkApi.rejectWithValue(e);\n        }\n    }\n);\n\nexport const updateThunkUserAction = createAsyncThunk<UserModel, UserModel>(\n    'thunkUser/update',\n    async (user, thunkApi) => {\n        try {\n            const response = await fetch(THUNK_USERS_URL, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json;charset=utf-8',\n                },\n                body: JSON.stringify(user),\n            });\n            return await response.json();\n        } catch (e) {\n            return thunkApi.rejectWithValue(e);\n        }\n    }\n);\n\nexport const deleteThunkUserAction = createAsyncThunk<UserModel, UserModel>(\n    'thunkUser/delete',\n    async (user, thunkApi) => {\n        try {\n            const response = await fetch(`${THUNK_USERS_URL}/${user.id}`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json;charset=utf-8',\n                },\n                body: JSON.stringify(user),\n            });\n            return await response.json();\n        } catch (e) {\n            return thunkApi.rejectWithValue(e);\n        }\n    }\n);\n","import { AnyAction, AsyncThunk } from '@reduxjs/toolkit';\n\ntype GenericAsyncThunk = AsyncThunk<unknown, unknown, any>;\ntype PendingAction = ReturnType<GenericAsyncThunk['pending']>;\n\nexport function isPendingAction(action: AnyAction): action is PendingAction {\n    return action.type.endsWith('/pending');\n}\nexport function isFulfilledAction(action: AnyAction): action is PendingAction {\n    return action.type.endsWith('/fulfilled');\n}\n","import { UserModel } from '@app/models/user.model';\nimport { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '@app/store/store';\nimport {\n    addThunkUserAction,\n    deleteThunkUserAction,\n    fetchThunkUserAction,\n    updateThunkUserAction,\n} from '@app/store/thunk-user/thunk-user.action';\nimport { isFulfilledAction, isPendingAction } from '@app/store/thunk-user/thunk-user.model';\n\nconst thunkUserAdapter = createEntityAdapter<UserModel>();\n\nconst initialState = thunkUserAdapter.getInitialState({ loading: false });\n\nconst slice = createSlice({\n    name: 'thunkUser',\n    initialState,\n    reducers: {},\n    extraReducers: builder => {\n        builder.addCase(fetchThunkUserAction.fulfilled, thunkUserAdapter.upsertMany);\n        builder.addCase(addThunkUserAction.fulfilled, thunkUserAdapter.addOne);\n        builder.addCase(updateThunkUserAction.fulfilled, (state, { payload }) => {\n            const { id, ...changes } = payload;\n            thunkUserAdapter.updateOne(state, { id, changes });\n        });\n        builder.addCase(deleteThunkUserAction.fulfilled, (state, { payload }) => {\n            thunkUserAdapter.removeOne(state, payload.id);\n        });\n        builder.addMatcher(isPendingAction, state => {\n            state.loading = true;\n        });\n        builder.addMatcher(isFulfilledAction, state => {\n            state.loading = false;\n        });\n    },\n});\n\nexport default slice.reducer;\n\nexport const { selectAll: selectAllThunkUsers } = thunkUserAdapter.getSelectors<RootState>(state => state.thunkUser);\n","import { EntityState } from '@reduxjs/toolkit';\n\nexport enum ProductTypeEnum {\n    Product1 = 'product1',\n    Product2 = 'product2',\n}\n\nexport interface ProductProp {\n    id: string;\n    name: string;\n    value: string;\n}\n\n// product state model\nexport interface AbstractProductStateModel {\n    id: string;\n    type: ProductTypeEnum;\n    name: string;\n}\n\nexport interface Product1StateModel extends AbstractProductStateModel {\n    type: ProductTypeEnum.Product1;\n    // спецом так назвал так как это проперти через доп редюсер делается причем заполняется в родительском редюсере\n    product1InnerProp: EntityState<ProductProp, string>;\n    prop: string;\n    uniqueProduct1Prop: string;\n    productFeature: ProductFeatureStateModel;\n}\n\nexport interface Product2StateModel extends AbstractProductStateModel {\n    type: ProductTypeEnum.Product2;\n    uniqueProduct2Prop: string;\n    product2InnerProp: EntityState<ProductProp, string>;\n    prop: string;\n}\n\nexport type ProductStateModel = Product1StateModel | Product2StateModel;\n\n// product configuration model - это модели для модификации стейта (то что прокидываю в экшенах)\nexport interface AbstractProductConfigurationModel {\n    type: ProductTypeEnum;\n    id: string;\n    version: number;\n}\n\nexport interface Product1ConfigurationModel extends AbstractProductConfigurationModel {\n    type: ProductTypeEnum.Product1;\n    name: string;\n    version: number;\n}\n\nexport interface Product2ConfigurationModel extends AbstractProductConfigurationModel {\n    type: ProductTypeEnum.Product2;\n    name: string;\n    version: number;\n}\n\nexport type ProductConfigurationModel = Product1ConfigurationModel | Product2ConfigurationModel;\n///////////////////////////////////////////////\n\n// это модели для шаренных между стейтами доп редюсерах (находятся в extraReducers) у продуктов\nexport interface ProductFeatureStateModel {\n    id: string;\n    name: string;\n}\n\nexport type ProductConfigurationsModel = Record<string, ProductConfigurationModel>;\n\nexport enum Product1ResettableKeys {\n    Product1Key = 'Product1Key',\n}\n\nexport enum Product2ResettableKeys {\n    Product2Key = 'Product2Key',\n}\n\nexport type ProductResettableKeys = Product1ResettableKeys[] | Product2ResettableKeys[];\n","import { createEntityAdapter } from '@reduxjs/toolkit';\nimport { ProductProp } from '@app/models/product.model';\n\nexport const product1InnerPropAdapter = createEntityAdapter<ProductProp>();\n\nexport const product1InnerPropAdapterInitialState = product1InnerPropAdapter.getInitialState();\n\nconsole.log({ product1InnerPropAdapterInitialState });\n","import { ProductFeatureStateModel } from '@app/models/product.model';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nconst initialState: ProductFeatureStateModel = null!;\n\nconst slice = createSlice({\n    name: 'product/feature',\n    initialState,\n    reducers: {\n        setProductFeatureNameAction(state, action: PayloadAction<string>) {\n            state.name = action.payload;\n        },\n    },\n});\n\nexport const productFeatureReducer = slice.reducer;\n\nexport const { setProductFeatureNameAction } = slice.actions;\n","import { Product1StateModel, ProductProp } from '@app/models/product.model';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { product1InnerPropAdapter } from '@app/store/product/1/product1.adapters';\nimport { productFeatureReducer } from '@app/store/product/feature/product-feature.slice';\n\nconst initialState: Product1StateModel = {} as Product1StateModel;\n\nconst slice = createSlice({\n    name: 'product/product1',\n    initialState,\n    reducers: {\n        setProduct1innerPropAction(state, action: PayloadAction<ProductProp[]>) {\n            product1InnerPropAdapter.setMany(state.product1InnerProp, action.payload);\n        },\n        setProduct1PropAction(state, action: PayloadAction<string>) {\n            state.prop = action.payload;\n        },\n    },\n    extraReducers: builder => {\n        // тут можно сделать inner state property у которой будет свой reducer\n        builder.addDefaultCase((state, action) => {\n            productFeatureReducer(state, action);\n        });\n    },\n});\n\nexport const product1Reducer = slice.reducer;\n\nexport const { setProduct1innerPropAction, setProduct1PropAction } = slice.actions;\n","import { createEntityAdapter } from '@reduxjs/toolkit';\nimport { ProductProp } from '@app/models/product.model';\n\nexport const product2InnerPropAdapter = createEntityAdapter<ProductProp>({});\nexport const product2InnerPropAdapterInitialState = product2InnerPropAdapter.getInitialState();\n","import { Product2StateModel, ProductProp } from '@app/models/product.model';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { productFeatureReducer } from '@app/store/product/feature/product-feature.slice';\nimport { product2InnerPropAdapter } from '@app/store/product/2/product2.adapters';\n\nconst initialState: Product2StateModel = null!;\n\nconst slice = createSlice({\n    name: 'product/product2',\n    initialState,\n    reducers: {\n        setProduct2innerPropAction(state, action: PayloadAction<ProductProp[]>) {\n            product2InnerPropAdapter.setMany(state.product2InnerProp, action.payload);\n        },\n    },\n    extraReducers: builder => {\n        // тут можно сделать inner state property у которой будет свой reducer\n        builder.addDefaultCase((state, action) => {\n            productFeatureReducer(state, action);\n        });\n    },\n});\n\nexport const product2Reducer = slice.reducer;\n\nexport const { setProduct2innerPropAction } = slice.actions;\n","import { createAction } from '@reduxjs/toolkit';\nimport { ProductConfigurationModel, ProductResettableKeys } from '@app/models/product.model';\n\n// это общие экшены, их могу использовать в  extraReducers(builder) { builder.addCase(\nexport const setProductAction = createAction<ProductConfigurationModel>('product/setProductAction');\nexport const resetProductAction = createAction<ProductResettableKeys>('product/resetProductAction');\n","import { AnyAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ProductConfigurationModel, ProductStateModel, ProductTypeEnum } from '@app/models/product.model';\nimport { product1Reducer } from '@app/store/product/1/product1.slice';\nimport { product2Reducer } from '@app/store/product/2/product2.slice';\nimport { product1InnerPropAdapterInitialState } from '@app/store/product/1/product1.adapters';\nimport { setProductAction } from '@app/store/product/abstract/abstract-product.actions';\n\nconst initialState: ProductStateModel = {\n    // тут надо добавить исходный продукт иначе не сработает action из product.container\n    type: ProductTypeEnum.Product1,\n    // если не засечу тут то получу ошибку относительно этих пропертей ids of undefined\n    product1InnerProp: product1InnerPropAdapterInitialState,\n\n    // type: ProductTypeEnum.Product2,\n    // product2InnerProp: product2InnerPropAdapter.getInitialState(),\n} as ProductStateModel;\n\nconst callSpecificProductReducer = (state: ProductStateModel, action: AnyAction) => {\n    switch (state?.type) {\n        case ProductTypeEnum.Product1:\n            return product1Reducer(state, action);\n        case ProductTypeEnum.Product2:\n            return product2Reducer(state, action);\n    }\n};\n\nconst slice = createSlice({\n    name: 'product',\n    initialState,\n    reducers: {\n        setProductTypeAction(state, action: PayloadAction<ProductTypeEnum>) {\n            state.type = action.payload;\n        },\n    },\n    extraReducers(builder) {\n        builder.addCase(\n            setProductAction,\n            (state: ProductStateModel, action: PayloadAction<ProductConfigurationModel>) => {\n                return { ...state, ...action.payload } as ProductStateModel;\n            }\n        );\n        builder.addDefaultCase((state, action) => {\n            return callSpecificProductReducer(state, action);\n        });\n    },\n});\n\nexport const { setProductTypeAction } = slice.actions;\n\nexport const abstractProductReducer = slice.reducer;\n","export enum HeadersEnum {\n    XRequestId = 'x-request-id',\n}\n","import { AnyAction, isRejected, Middleware, MiddlewareAPI } from '@reduxjs/toolkit';\nimport { HeadersEnum } from '@app/models/header.model';\n\nexport enum RequestErrorNameEnum {\n    ConditionError = 'ConditionError',\n}\n\nconst NOTIFICATION_BLACK_LIST: string[] = [];\n\nexport const rtkQueryErrorLogger: Middleware = (_api: MiddlewareAPI) => next => action => {\n    if (isRejected(action)) {\n        let headersReq = (action.meta as any)?.baseQueryMeta?.request?.headers;\n        let headersRes = (action.meta as any)?.baseQueryMeta?.response?.headers;\n\n        if (headersReq) {\n            for (let i of headersReq) {\n                console.log('headersReq', i);\n            }\n        }\n\n        if (headersRes) {\n            for (let i of headersRes) {\n                console.log('headersRes', i);\n            }\n        }\n\n        // RequestErrorNameEnum.ConditionError - RTK Query internal error, that just means that another request was skipped because there was either already a request in flight or already a value in cache, so no request needs to be made. This is an internal rejection that RTK-Query uses to track component subscriptions and not an error.\n        if (\n            action.error.name !== RequestErrorNameEnum.ConditionError &&\n            !NOTIFICATION_BLACK_LIST.includes((action.meta.arg as any).arg?.endpointName)\n        ) {\n            // тут можно вызывать нотификашку например\n            logRequestError(action);\n        }\n    }\n\n    return next(action);\n};\n\n// helpers\nfunction logRequestError(action: AnyAction) {\n    const meta = action.meta;\n\n    if (!meta) return console.error(\"logRequestError Action doesn't contain 'meta'\", action);\n\n    const { request, response } = meta.baseQueryMeta;\n\n    if (!request && !response) return console.error(`Request/response error: ${meta.baseQueryMeta}`);\n\n    const { method, url } = request ?? {};\n    const { status, statusText } = response ?? {};\n\n    const requestHeaders = action.meta?.baseQueryMeta?.request?.headers || [];\n\n    const xRequestId = [...requestHeaders].find(([header]) => header === HeadersEnum.XRequestId)?.[1];\n\n    console.group(`ERROR: ${method} ${url}`);\n    console.log(`STATUS: ${status}`);\n    console.log(`STATUS-TEXT: ${statusText}`);\n    console.log(`X-REQUEST-ID: ${xRequestId}`);\n\n    if (meta.arg) console.log(`RTK QUERY: ${meta.arg.type} ${meta.arg.endpointName}`);\n\n    if (action.payload) {\n        console.groupCollapsed('PAYLOAD');\n        console.log(JSON.stringify(action.payload, null, 4));\n        console.groupEnd();\n    }\n\n    console.groupEnd();\n}\n","import { Action, combineReducers, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { commonApi } from '@app/store/common/common.api';\nimport counter from './counter/counter.slice';\nimport todos from './todos/todos.slice';\nimport users from './user/api-user.slice';\nimport visibilityFilter from './visibility-filters/visibility-filters.slice';\nimport issuesDisplay from './issues-display/issues-display.slice';\nimport posts from './posts/posts.slice';\nimport books from './books/books.slice';\nimport thunkUser from './thunk-user/thunk-user.slice';\nimport { abstractProductReducer } from '@app/store/product/abstract/abstract-product.slice';\nimport { rtkQueryErrorLogger } from '@app/store/store.utils';\nimport { setupListeners } from '@reduxjs/toolkit/query/react';\n\nconst DEFAULT_FETCH_POLICY_FROM_GQL = 'cache-first';\n\n// автоматически подцепляет дев тулы\n\n// через стандартные редюсеры\n// const store = configureStore({\n//     reducer: counterReducer\n// });\n\n// const middleware = [...getDefaultMiddleware(), logger];\n//\nconst preloadedState = {};\n\nconst persistConfig = {\n    key: 'root',\n    version: 1,\n    storage,\n    // по умолчанию в локалсторадж складывает все, тут указываю что конкретно, также есть blackList\n    whitelist: ['todos'],\n};\n\n// TODO сделать все персистом\nconst persistedReducer = persistReducer(persistConfig, books);\n\nconst rootReducer = combineReducers({\n    counter,\n    todos,\n    users,\n    visibilityFilter,\n    books: persistedReducer,\n    issuesDisplay,\n    posts,\n    thunkUser,\n    product: abstractProductReducer,\n    [commonApi.reducerPath]: commonApi.reducer,\n});\n\nconst store = configureStore({\n    reducer: rootReducer,\n    preloadedState,\n    middleware: getDefaultMiddleware =>\n        getDefaultMiddleware({\n            thunk: {\n                extraArgument: { fetchPolicy: DEFAULT_FETCH_POLICY_FROM_GQL },\n            },\n            immutableCheck: false,\n            serializableCheck: {\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n            },\n        })\n            // Turn on logger if u need\n            // logger,\n            // тут обязательно надо через конкат иначе ругается на него тайпскрипт, причем тупо на type в AppThunk почемуто\n            .concat(commonApi.middleware, rtkQueryErrorLogger),\n    devTools: process.env.NODE_ENV !== 'production',\n});\n\n// через слайсы без persist\n// const store = configureStore({\n//     reducer: rootReducer,\n//     middleware,\n//     preloadedState,\n//     devTools: process.env.NODE_ENV !== 'production',\n//     enhancers: [reduxBatch],\n// });\n\n// if (process.env.NODE_ENV === 'development' && module.hot) {\n//     module.hot.accept('./slices', () => {\n//         const newRootReducer = require('./slices').default;\n//         store.replaceReducer(newRootReducer);\n//     });\n// }\n\nsetupListeners(store.dispatch);\n\nexport default store;\n\n// можно и так\n// export type RootState = ReturnType<typeof rootReducer>;\nexport type RootState = ReturnType<typeof store.getState>;\n\n// пара хуков для работы (необязательно так как обычно использую AppDispatch в дженерике диспатч но все же)\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n// остальные это кастомные типы для работы с thunk\n// так как часто использую сразу вынесу сюда чтобы не копи пастить\n// export type appThunk = ThunkAction<void, RootState, unknown, Action<string>>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, { fetchPolicy: {} }, Action<string>>;\n// export type EnhancedAction<T, R> = (id: string) => (payload: T) => AppThunk<Promise<R>>;\n\nexport const persistor = persistStore(store);\n","import { Action, combineReducers, configureStore, createAction, createNextState, nanoid } from '@reduxjs/toolkit';\nimport { PreloadedState, CombinedState } from 'redux';\nimport React from 'react';\n\nexport interface IProtectedProps {\n    prop: number;\n    prop1: string;\n}\n\nfunction initStore(preloadedState: PreloadedAppState, props: IProtectedProps) {\n    const state = {\n        ...preloadedState,\n        protectedProps: props,\n    };\n\n    function createProtectedReducerAndActions() {\n        const protectedAction = createAction<Partial<RootState['protectedProps']>>(`${nanoid()}/updateProtectedProps`);\n\n        return {\n            protectedReducer: (state: RootState | undefined, action: Action) => {\n                if (state && protectedAction.match(action)) {\n                    return createNextState(state, draft => {\n                        draft.protectedProps = { ...draft.protectedProps, ...action.payload };\n                    });\n                }\n\n                return rootReducer(state, action);\n            },\n            protectedActions: {\n                protectedAction,\n            },\n        };\n    }\n\n    const { protectedReducer, protectedActions } = createProtectedReducerAndActions();\n\n    const store = configureStore({\n        preloadedState: state,\n        reducer: protectedReducer,\n    });\n\n    return [store, protectedActions] as const;\n}\n\nconst rootReducer = combineReducers({\n    protectedProps: (s: IProtectedProps | undefined) => s ?? { prop: 0, prop1: '' },\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\ntype PreloadedAppState = PreloadedState<CombinedState<RootState>>;\n\nexport function useInitStore(state: PreloadedAppState, props: IProtectedProps) {\n    const [store, protectedActions] = initStore(state, props);\n\n    React.useEffect(() => {\n        store.dispatch(protectedActions.protectedAction(props));\n    }, [props, protectedActions, store]);\n\n    return store;\n}\n","import { RootState } from './store-with-protected-actions';\n\nconst storeWithProtectedActionsSelector = (state: RootState) => state.protectedProps;\n\nexport const storeWithProtectedActionsSelectorProp = (state: RootState) =>\n    storeWithProtectedActionsSelector(state).prop;\n\nexport const storeWithProtectedActionsSelectorProp1 = (state: RootState) =>\n    storeWithProtectedActionsSelector(state).prop1;\n","import cn from 'classnames';\nimport React, { memo } from 'react';\n\nimport { useInitStore } from '@app/store/store-with-protected-actions/store-with-protected-actions';\nimport { Provider, useSelector } from 'react-redux';\nimport {\n    storeWithProtectedActionsSelectorProp,\n    storeWithProtectedActionsSelectorProp1,\n} from '@app/store/store-with-protected-actions/store-with-protected-actions.selectors';\n\ntype StoreWithProtectedActionProps = {};\n\nconst StoreWithProtectedAction = memo<StoreWithProtectedActionProps>(() => {\n    const store = useInitStore({}, { prop: 37, prop1: 'Max' });\n\n    return (\n        <Provider store={store}>\n            <div className={cn('taStoreWithProtectedAction')}>\n                <Inner />\n            </div>\n        </Provider>\n    );\n});\n\nfunction Inner() {\n    const prop = useSelector(storeWithProtectedActionsSelectorProp);\n    const prop1 = useSelector(storeWithProtectedActionsSelectorProp1);\n\n    return (\n        <>\n            {prop} {prop1}\n        </>\n    );\n}\n\nexport { StoreWithProtectedAction };\n","import React, { memo } from 'react';\nimport { Provider } from 'react-redux';\nimport store, { persistor } from '../store/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { StoreWithProtectedAction } from '@app/components/store-with-protected-actions/store-with-protected-actions.component';\n\nconst Rt = () => {\n    return (\n        <Provider store={store}>\n            {/* должен обернуть в гейт чтобы подгрузилась инфа из локал сторадж*/}\n            <PersistGate loading={null} persistor={persistor}>\n                <StoreWithProtectedAction />\n                {/*<ReduxCustomContextContainer />*/}\n                {/*<ReduxContextContainer />*/}\n                {/*<ProductContainer />*/}\n                {/*<UserListApiContainer />*/}\n                {/*<LocalStorageRtk />*/}\n                {/*<UserListThunkContainer />*/}\n                {/*<RtBooksContainer />*/}\n                {/*<RtUsersContainer />*/}\n                {/*<RtUsersContainer1 />*/}\n                {/*<RtCounter />*/}\n                {/*<RtTodos />*/}\n                {/*<RtIssuesDisplay />*/}\n                {/*<RtPosts />*/}\n            </PersistGate>\n        </Provider>\n    );\n};\n\nexport default memo(Rt);\n"],"names":["__emulate__","Boolean","process","REACT_APP_EMULATE","console","log","API_BASE_URL","API_PATH","commonApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","concat","prepareHeaders","headers","_api","set","uuidv4","endpoints","_","slice","createSlice","name","initialState","reducers","incrementAction","state","decrementAction","actions","todosSlice","entities","addTodoAction","_ref","payload","push","addTodoPreparedAction","reducer","_ref2","id","text","completed","prepare","Math","random","Date","now","toggleTodoAction","_ref3","todo","find","apiUserApi","injectEndpoints","build","fetchUserList","query","url","fetchUser","queryFn","__","fetchWithBQ","userId","dispatch","_dispatch","getState","result","method","error","data","addUser","mutation","user","body","onQueryStarted","_ref4","_ref5","_user","queryFulfilled","newUser","util","updateQueryData","undefined","userList","_unused","addUserDebounced","_ref6","_ref7","_await$debouncedAddUs","cancelDebounce","_cancelDebounce","_getState","debouncedAddUser","updateUser","_ref8","_ref9","_ref0","updateResult","userIndex","findIndex","item","_unused2","undo","deleteUser","_ref1","filter","userFromList","overrideExisting","debounce","async","leading","usersApiAdapter","createEntityAdapter","selectId","sortComparer","a","b","localeCompare","usersApiSlice","getInitialState","loading","extraReducers","builder","addMatcher","matchFulfilled","action","setAll","matchPending","matchRejected","selectAll","selectAllApiUsers","selectById","selectApiUserById","selectIds","selectApiUserIds","getSelectors","users","visibilityFilterSlice","setVisibilityFilterAction","_state","org","repo","page","displayType","IssuesDisplayTypeEnum","Issues","issueId","issuesDisplaySlice","displayRepo","setCurrentPage","setCurrentDisplayType","createAsyncThunk","thunkApi","posts","customAxios","get","e","rejectWithValue","postsSlice","fetchPostsStart","fetchPostsSuccess","fetchPostsError","selectPosts","createSelector","title","_posts$entities2","i","includes","booksAdapter","book","fetchBooksAction","Promise","resolve","updateBookAsyncAction","_thunkApi","removeBookAction","removeOne","addBookAction","addOne","updateBookAction","updateOne","addCase","pending","_action","fulfilled","upsertMany","changes","_objectWithoutProperties","_excluded","selectBookById","selectBookIds","selectEntities","selectBookEntities","selectAllBooks","selectTotal","selectTotalBooks","books","THUNK_USERS_URL","fetchThunkUserAction","response","fetch","json","addThunkUserAction","JSON","stringify","updateThunkUserAction","deleteThunkUserAction","isPendingAction","type","endsWith","isFulfilledAction","thunkUserAdapter","selectAllThunkUsers","thunkUser","ProductTypeEnum","product1InnerPropAdapter","product1InnerPropAdapterInitialState","setProductFeatureNameAction","productFeatureReducer","setProduct1innerPropAction","setMany","product1InnerProp","setProduct1PropAction","prop","addDefaultCase","product1Reducer","product2InnerPropAdapter","setProduct2innerPropAction","product2InnerProp","product2Reducer","setProductAction","createAction","Product1","setProductTypeAction","_objectSpread","callSpecificProductReducer","Product2","abstractProductReducer","HeadersEnum","RequestErrorNameEnum","NOTIFICATION_BLACK_LIST","rtkQueryErrorLogger","next","isRejected","_action$meta","_action$meta$baseQuer","_action$meta$baseQuer2","_action$meta2","_action$meta2$baseQue","_action$meta2$baseQue2","_arg","headersReq","meta","baseQueryMeta","request","headersRes","ConditionError","arg","endpointName","_action$meta3","_action$meta3$baseQue","_action$meta3$baseQue2","_find","status","statusText","requestHeaders","xRequestId","header","XRequestId","group","groupCollapsed","groupEnd","logRequestError","persistConfig","key","version","storage","whitelist","persistedReducer","persistReducer","rootReducer","combineReducers","counter","todos","visibilityFilter","issuesDisplay","product","store","configureStore","preloadedState","middleware","getDefaultMiddleware","thunk","extraArgument","fetchPolicy","immutableCheck","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","setupListeners","persistor","persistStore","protectedProps","s","prop1","useInitStore","props","protectedActions","protectedReducer","protectedAction","nanoid","match","createNextState","draft","createProtectedReducerAndActions","initStore","React","storeWithProtectedActionsSelector","storeWithProtectedActionsSelectorProp","storeWithProtectedActionsSelectorProp1","StoreWithProtectedAction","memo","_jsx","Provider","children","className","cn","Inner","useSelector","_jsxs","_Fragment","Rt","PersistGate"],"sourceRoot":""}